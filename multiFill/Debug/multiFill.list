
multiFill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003680  08003680  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003688  08003688  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  0800369c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800369c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d57  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8c  00000000  00000000  00029d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001272c  00000000  00000000  0002c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aec7  00000000  00000000  0003ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069ea5  00000000  00000000  00049d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae8  00000000  00000000  000b3c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003584 	.word	0x08003584

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003584 	.word	0x08003584

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	003b      	movs	r3, r7
 80004c0:	0018      	movs	r0, r3
 80004c2:	2308      	movs	r3, #8
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f003 f854 	bl	8003574 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004cc:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MX_ADC_Init+0xc0>)
 80004ce:	4a2b      	ldr	r2, [pc, #172]	; (800057c <MX_ADC_Init+0xc4>)
 80004d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <MX_ADC_Init+0xc0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MX_ADC_Init+0xc0>)
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	05d2      	lsls	r2, r2, #23
 80004de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_ADC_Init+0xc0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_ADC_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <MX_ADC_Init+0xc0>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_ADC_Init+0xc0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ADC_Init+0xc0>)
 80004fa:	2220      	movs	r2, #32
 80004fc:	2100      	movs	r1, #0
 80004fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_ADC_Init+0xc0>)
 8000502:	2221      	movs	r2, #33	; 0x21
 8000504:	2100      	movs	r1, #0
 8000506:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_ADC_Init+0xc0>)
 800050a:	2200      	movs	r2, #0
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_ADC_Init+0xc0>)
 8000510:	22c2      	movs	r2, #194	; 0xc2
 8000512:	32ff      	adds	r2, #255	; 0xff
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_ADC_Init+0xc0>)
 8000518:	222c      	movs	r2, #44	; 0x2c
 800051a:	2100      	movs	r1, #0
 800051c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_ADC_Init+0xc0>)
 8000520:	2204      	movs	r2, #4
 8000522:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_ADC_Init+0xc0>)
 8000526:	2200      	movs	r2, #0
 8000528:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_ADC_Init+0xc0>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_ADC_Init+0xc0>)
 8000532:	2200      	movs	r2, #0
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <MX_ADC_Init+0xc0>)
 8000538:	2200      	movs	r2, #0
 800053a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_ADC_Init+0xc0>)
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fd5a 	bl	8000ff8 <HAL_ADC_Init>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000548:	f000 fbfc 	bl	8000d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800054c:	003b      	movs	r3, r7
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000552:	003b      	movs	r3, r7
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	0152      	lsls	r2, r2, #5
 8000558:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800055a:	003a      	movs	r2, r7
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_ADC_Init+0xc0>)
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fff9 	bl	8001558 <HAL_ADC_ConfigChannel>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800056a:	f000 fbeb 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	20000028 	.word	0x20000028
 800057c:	40012400 	.word	0x40012400

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	240c      	movs	r4, #12
 800058a:	193b      	adds	r3, r7, r4
 800058c:	0018      	movs	r0, r3
 800058e:	2314      	movs	r3, #20
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f002 ffee 	bl	8003574 <memset>
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <HAL_ADC_MspInit+0x70>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d122      	bne.n	80005e8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0089      	lsls	r1, r1, #2
 80005ac:	430a      	orrs	r2, r1
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005b6:	2101      	movs	r1, #1
 80005b8:	430a      	orrs	r2, r1
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <HAL_ADC_MspInit+0x74>)
 80005be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c0:	2201      	movs	r2, #1
 80005c2:	4013      	ands	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = time_ref_Pin;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	2203      	movs	r2, #3
 80005d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(time_ref_GPIO_Port, &GPIO_InitStruct);
 80005da:	193a      	adds	r2, r7, r4
 80005dc:	23a0      	movs	r3, #160	; 0xa0
 80005de:	05db      	lsls	r3, r3, #23
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fa2e 	bl	8001a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b009      	add	sp, #36	; 0x24
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40012400 	.word	0x40012400
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b089      	sub	sp, #36	; 0x24
 80005fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	240c      	movs	r4, #12
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2314      	movs	r3, #20
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f002 ffb3 	bl	8003574 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b46      	ldr	r3, [pc, #280]	; (8000728 <MX_GPIO_Init+0x130>)
 8000610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <MX_GPIO_Init+0x130>)
 8000614:	2104      	movs	r1, #4
 8000616:	430a      	orrs	r2, r1
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
 800061a:	4b43      	ldr	r3, [pc, #268]	; (8000728 <MX_GPIO_Init+0x130>)
 800061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061e:	2204      	movs	r2, #4
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b40      	ldr	r3, [pc, #256]	; (8000728 <MX_GPIO_Init+0x130>)
 8000628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800062a:	4b3f      	ldr	r3, [pc, #252]	; (8000728 <MX_GPIO_Init+0x130>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 8000632:	4b3d      	ldr	r3, [pc, #244]	; (8000728 <MX_GPIO_Init+0x130>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <MX_GPIO_Init+0x130>)
 8000640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <MX_GPIO_Init+0x130>)
 8000644:	2102      	movs	r1, #2
 8000646:	430a      	orrs	r2, r1
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
 800064a:	4b37      	ldr	r3, [pc, #220]	; (8000728 <MX_GPIO_Init+0x130>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	2202      	movs	r2, #2
 8000650:	4013      	ands	r3, r2
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	4834      	ldr	r0, [pc, #208]	; (800072c <MX_GPIO_Init+0x134>)
 800065c:	2200      	movs	r2, #0
 800065e:	0019      	movs	r1, r3
 8000660:	f001 fb7b 	bl	8001d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, run_fwd_Pin|run_rev_Pin, GPIO_PIN_RESET);
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	2200      	movs	r2, #0
 800066a:	21c0      	movs	r1, #192	; 0xc0
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fb74 	bl	8001d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	22c0      	movs	r2, #192	; 0xc0
 8000676:	0212      	lsls	r2, r2, #8
 8000678:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2201      	movs	r2, #1
 800067e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	193b      	adds	r3, r7, r4
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <MX_GPIO_Init+0x134>)
 8000690:	0019      	movs	r1, r3
 8000692:	0010      	movs	r0, r2
 8000694:	f001 f9d6 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2232      	movs	r2, #50	; 0x32
 800069c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2203      	movs	r2, #3
 80006a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	193a      	adds	r2, r7, r4
 80006ac:	23a0      	movs	r3, #160	; 0xa0
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f9c6 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = run_fwd_Pin|run_rev_Pin;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	22c0      	movs	r2, #192	; 0xc0
 80006bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2201      	movs	r2, #1
 80006c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	193a      	adds	r2, r7, r4
 80006d2:	23a0      	movs	r3, #160	; 0xa0
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	0011      	movs	r1, r2
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 f9b3 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = run_flush_Pin;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2201      	movs	r2, #1
 80006ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(run_flush_GPIO_Port, &GPIO_InitStruct);
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MX_GPIO_Init+0x138>)
 80006f4:	0019      	movs	r1, r3
 80006f6:	0010      	movs	r0, r2
 80006f8:	f001 f9a4 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = estop_Pin|start_Pin;
 80006fc:	0021      	movs	r1, r4
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	22c0      	movs	r2, #192	; 0xc0
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2201      	movs	r2, #1
 8000710:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	187a      	adds	r2, r7, r1
 8000714:	23a0      	movs	r3, #160	; 0xa0
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	0011      	movs	r1, r2
 800071a:	0018      	movs	r0, r3
 800071c:	f001 f992 	bl	8001a44 <HAL_GPIO_Init>

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b009      	add	sp, #36	; 0x24
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	50000800 	.word	0x50000800
 8000730:	50000400 	.word	0x50000400

08000734 <_Z11setRunDelaym>:
#define RETRACTING_TIME		3000L	// maksimi huuhteluaika

#define BLINK_ON_TIME_MS 	200
#define BLINK_OFF_TIME_MS 	150

void setRunDelay( uint32_t msDelay ) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	delayCounter[0] = msDelay;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <_Z11setRunDelaym+0x18>)
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000090 	.word	0x20000090

08000750 <_Z11getRunDelayv>:

uint32_t getRunDelay() {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	return delayCounter[0];
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <_Z11getRunDelayv+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000090 	.word	0x20000090

08000764 <_Z13setBlinkDelaym>:

void setBlinkDelay( uint32_t msDelay ) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	delayCounter[1] = msDelay;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <_Z13setBlinkDelaym+0x18>)
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	605a      	str	r2, [r3, #4]
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	20000090 	.word	0x20000090

08000780 <_Z13getBlinkDelayv>:

uint32_t getBlinkDelay() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	return delayCounter[1];
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <_Z13getBlinkDelayv+0x10>)
 8000786:	685b      	ldr	r3, [r3, #4]
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000090 	.word	0x20000090

08000794 <_Z5printPKc>:
	return -1;
}

}
*/
void print( const char *_txt ) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)_txt, strlen(_txt), HAL_MAX_DELAY);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fcb2 	bl	8000108 <strlen>
 80007a4:	0003      	movs	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <_Z5printPKc+0x28>)
 80007b0:	f002 fa0a 	bl	8002bc8 <HAL_UART_Transmit>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000098 	.word	0x20000098

080007c0 <_Z7printlnPKc>:

void println( const char *_txt ) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	print( _txt );
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff ffe2 	bl	8000794 <_Z5printPKc>
	print( "\r\n");
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <_Z7printlnPKc+0x20>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f7ff ffde 	bl	8000794 <_Z5printPKc>
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800359c 	.word	0x0800359c

080007e4 <_Z9getInputsv>:

void getInputs() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	in_flush = ( HAL_GPIO_ReadPin(run_flush_GPIO_Port, run_flush_Pin) ) ? 0 : 1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <_Z9getInputsv+0x58>)
 80007ea:	2102      	movs	r1, #2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fa97 	bl	8001d20 <HAL_GPIO_ReadPin>
 80007f2:	0003      	movs	r3, r0
 80007f4:	425a      	negs	r2, r3
 80007f6:	4153      	adcs	r3, r2
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <_Z9getInputsv+0x5c>)
 80007fc:	701a      	strb	r2, [r3, #0]
	in_start = ( HAL_GPIO_ReadPin(start_GPIO_Port, start_Pin) ) ? 0 : 1;
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	00da      	lsls	r2, r3, #3
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fa89 	bl	8001d20 <HAL_GPIO_ReadPin>
 800080e:	0003      	movs	r3, r0
 8000810:	425a      	negs	r2, r3
 8000812:	4153      	adcs	r3, r2
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <_Z9getInputsv+0x60>)
 8000818:	701a      	strb	r2, [r3, #0]
	in_estop = ( HAL_GPIO_ReadPin(estop_GPIO_Port, estop_Pin) ) ? 1 : 0;
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	009a      	lsls	r2, r3, #2
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fa7b 	bl	8001d20 <HAL_GPIO_ReadPin>
 800082a:	0003      	movs	r3, r0
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	4193      	sbcs	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <_Z9getInputsv+0x64>)
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	50000400 	.word	0x50000400
 8000840:	20000088 	.word	0x20000088
 8000844:	20000089 	.word	0x20000089
 8000848:	2000008a 	.word	0x2000008a

0800084c <_Z10putOutputsv>:

void putOutputs() {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( run_fwd_GPIO_Port, run_fwd_Pin, ( (out_run_fwd) ? GPIO_PIN_RESET : GPIO_PIN_SET ) );
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <_Z10putOutputsv+0x40>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_Z10putOutputsv+0x10>
 8000858:	2300      	movs	r3, #0
 800085a:	e000      	b.n	800085e <_Z10putOutputsv+0x12>
 800085c:	2301      	movs	r3, #1
 800085e:	22a0      	movs	r2, #160	; 0xa0
 8000860:	05d0      	lsls	r0, r2, #23
 8000862:	001a      	movs	r2, r3
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	f001 fa78 	bl	8001d5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( run_rev_GPIO_Port, run_rev_Pin, ( (out_run_rev) ? GPIO_PIN_RESET : GPIO_PIN_SET ) );
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <_Z10putOutputsv+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_Z10putOutputsv+0x2a>
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <_Z10putOutputsv+0x2c>
 8000876:	2301      	movs	r3, #1
 8000878:	22a0      	movs	r2, #160	; 0xa0
 800087a:	05d0      	lsls	r0, r2, #23
 800087c:	001a      	movs	r2, r3
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	f001 fa6b 	bl	8001d5a <HAL_GPIO_WritePin>
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	2000008b 	.word	0x2000008b
 8000890:	2000008c 	.word	0x2000008c

08000894 <_Z7ledsOffv>:

void ledsOff() {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET );
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	01db      	lsls	r3, r3, #7
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <_Z7ledsOffv+0x2c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	0019      	movs	r1, r3
 80008a2:	f001 fa5a 	bl	8001d5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET );
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <_Z7ledsOffv+0x2c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	0019      	movs	r1, r3
 80008b0:	f001 fa53 	bl	8001d5a <HAL_GPIO_WritePin>
	ledIsOn = false;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <_Z7ledsOffv+0x30>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	50000800 	.word	0x50000800
 80008c4:	20000085 	.word	0x20000085

080008c8 <_Z5ledOn9_ledColor>:

void ledOn( _ledColor _col ) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, ( _col == C_GREEN ) ? GPIO_PIN_SET : GPIO_PIN_RESET );
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <_Z5ledOn9_ledColor+0x18>
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <_Z5ledOn9_ledColor+0x1a>
 80008e0:	2300      	movs	r3, #0
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	01d1      	lsls	r1, r2, #7
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <_Z5ledOn9_ledColor+0x4c>)
 80008e8:	001a      	movs	r2, r3
 80008ea:	f001 fa36 	bl	8001d5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, ( _col == C_GREEN ) ? GPIO_PIN_RESET : GPIO_PIN_SET );
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	4193      	sbcs	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	001a      	movs	r2, r3
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <_Z5ledOn9_ledColor+0x4c>)
 8000900:	0019      	movs	r1, r3
 8000902:	f001 fa2a 	bl	8001d5a <HAL_GPIO_WritePin>
	ledIsOn = true;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <_Z5ledOn9_ledColor+0x50>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b002      	add	sp, #8
 8000912:	bd80      	pop	{r7, pc}
 8000914:	50000800 	.word	0x50000800
 8000918:	20000085 	.word	0x20000085

0800091c <_Z6setLED9_ledState9_ledColor>:

void setLED( _ledState _st, _ledColor _col ) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	1dbb      	adds	r3, r7, #6
 800092a:	1c0a      	adds	r2, r1, #0
 800092c:	701a      	strb	r2, [r3, #0]
	switch ( _st ) {
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d014      	beq.n	8000960 <_Z6setLED9_ledState9_ledColor+0x44>
 8000936:	dc23      	bgt.n	8000980 <_Z6setLED9_ledState9_ledColor+0x64>
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <_Z6setLED9_ledState9_ledColor+0x26>
 800093c:	2b01      	cmp	r3, #1
 800093e:	d006      	beq.n	800094e <_Z6setLED9_ledState9_ledColor+0x32>
		blinking = true;
		blinker = _col;
		ledOn( _col );
		break;
	}
	default: break;
 8000940:	e01e      	b.n	8000980 <_Z6setLED9_ledState9_ledColor+0x64>
		blinking = false;
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <_Z6setLED9_ledState9_ledColor+0x70>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
		ledsOff();
 8000948:	f7ff ffa4 	bl	8000894 <_Z7ledsOffv>
		break;
 800094c:	e019      	b.n	8000982 <_Z6setLED9_ledState9_ledColor+0x66>
		blinking = false;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <_Z6setLED9_ledState9_ledColor+0x70>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
		ledOn( _col );
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ffb5 	bl	80008c8 <_Z5ledOn9_ledColor>
		break;
 800095e:	e010      	b.n	8000982 <_Z6setLED9_ledState9_ledColor+0x66>
		setBlinkDelay( BLINK_ON_TIME_MS );
 8000960:	20c8      	movs	r0, #200	; 0xc8
 8000962:	f7ff feff 	bl	8000764 <_Z13setBlinkDelaym>
		blinking = true;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <_Z6setLED9_ledState9_ledColor+0x70>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
		blinker = _col;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_Z6setLED9_ledState9_ledColor+0x74>)
 800096e:	1dba      	adds	r2, r7, #6
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	701a      	strb	r2, [r3, #0]
		ledOn( _col );
 8000974:	1dbb      	adds	r3, r7, #6
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ffa5 	bl	80008c8 <_Z5ledOn9_ledColor>
		break;
 800097e:	e000      	b.n	8000982 <_Z6setLED9_ledState9_ledColor+0x66>
	default: break;
 8000980:	46c0      	nop			; (mov r8, r8)
	}
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000084 	.word	0x20000084
 8000990:	20000086 	.word	0x20000086

08000994 <_Z7doBlinkv>:

void doBlink() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	if ( blinking ) {
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_Z7doBlinkv+0x48>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d019      	beq.n	80009d4 <_Z7doBlinkv+0x40>
		if ( getBlinkDelay() == 0 ) {
 80009a0:	f7ff feee 	bl	8000780 <_Z13getBlinkDelayv>
 80009a4:	0003      	movs	r3, r0
 80009a6:	425a      	negs	r2, r3
 80009a8:	4153      	adcs	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d011      	beq.n	80009d4 <_Z7doBlinkv+0x40>
			if ( ledIsOn ) {
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <_Z7doBlinkv+0x4c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <_Z7doBlinkv+0x30>
				ledsOff();
 80009b8:	f7ff ff6c 	bl	8000894 <_Z7ledsOffv>
				setBlinkDelay( BLINK_OFF_TIME_MS );
 80009bc:	2096      	movs	r0, #150	; 0x96
 80009be:	f7ff fed1 	bl	8000764 <_Z13setBlinkDelaym>
				ledOn( blinker );
				setBlinkDelay( BLINK_ON_TIME_MS );
			}
		}
	}
}
 80009c2:	e007      	b.n	80009d4 <_Z7doBlinkv+0x40>
				ledOn( blinker );
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_Z7doBlinkv+0x50>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff7d 	bl	80008c8 <_Z5ledOn9_ledColor>
				setBlinkDelay( BLINK_ON_TIME_MS );
 80009ce:	20c8      	movs	r0, #200	; 0xc8
 80009d0:	f7ff fec8 	bl	8000764 <_Z13setBlinkDelaym>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	20000084 	.word	0x20000084
 80009e0:	20000085 	.word	0x20000085
 80009e4:	20000086 	.word	0x20000086

080009e8 <_Z15getTimeSetpointm>:

uint32_t getTimeSetpoint(uint32_t runningTime) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	uint32_t result;
	HAL_ADC_Start( &hadc );
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <_Z15getTimeSetpointm+0x44>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fc74 	bl	80012e0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion( &hadc, HAL_MAX_DELAY );
 80009f8:	2301      	movs	r3, #1
 80009fa:	425a      	negs	r2, r3
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <_Z15getTimeSetpointm+0x44>)
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fd01 	bl	8001408 <HAL_ADC_PollForConversion>
	result = HAL_ADC_GetValue( &hadc );
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <_Z15getTimeSetpointm+0x44>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fd99 	bl	8001540 <HAL_ADC_GetValue>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop( &hadc );
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <_Z15getTimeSetpointm+0x44>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fcb7 	bl	8001388 <HAL_ADC_Stop>
	return (result * runningTime ) / MAX_ADC;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	4353      	muls	r3, r2
 8000a20:	0b1b      	lsrs	r3, r3, #12
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b004      	add	sp, #16
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000028 	.word	0x20000028

08000a30 <main>:

int main(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  HAL_Init();
 8000a34:	f000 fa70 	bl	8000f18 <HAL_Init>

 SystemClock_Config();
 8000a38:	f000 f906 	bl	8000c48 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 8000a3c:	f7ff fddc 	bl	80005f8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000a40:	f7ff fd3a 	bl	80004b8 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000a44:	f000 f9ca 	bl	8000ddc <MX_USART2_UART_Init>

  runState = RS_IDLE;
 8000a48:	4b70      	ldr	r3, [pc, #448]	; (8000c0c <main+0x1dc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  out_run_fwd = out_run_rev = false;
 8000a4e:	4b70      	ldr	r3, [pc, #448]	; (8000c10 <main+0x1e0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	4b6e      	ldr	r3, [pc, #440]	; (8000c10 <main+0x1e0>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b6e      	ldr	r3, [pc, #440]	; (8000c14 <main+0x1e4>)
 8000a5a:	701a      	strb	r2, [r3, #0]
  putOutputs();
 8000a5c:	f7ff fef6 	bl	800084c <_Z10putOutputsv>

  print("Maston multiFill controller v 1.0.0 build ");
 8000a60:	4b6d      	ldr	r3, [pc, #436]	; (8000c18 <main+0x1e8>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fe96 	bl	8000794 <_Z5printPKc>
  print(__DATE__);
 8000a68:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <main+0x1ec>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fe92 	bl	8000794 <_Z5printPKc>
  print( "  ");
 8000a70:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <main+0x1f0>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fe8e 	bl	8000794 <_Z5printPKc>
  println(__TIME__ );
 8000a78:	4b6a      	ldr	r3, [pc, #424]	; (8000c24 <main+0x1f4>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fea0 	bl	80007c0 <_Z7printlnPKc>

  while (1) {
	  getInputs();
 8000a80:	f7ff feb0 	bl	80007e4 <_Z9getInputsv>
	  // tsekataan hätäseis riippumatta missä ajotilassa ollaan
	  // jos aktivoitu, päädytään heti hätäseis-tilaan.
	  if ( in_estop ) {
 8000a84:	4b68      	ldr	r3, [pc, #416]	; (8000c28 <main+0x1f8>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <main+0x74>
		  ledsOff();
 8000a8c:	f7ff ff02 	bl	8000894 <_Z7ledsOffv>
		  out_run_fwd = out_run_rev = false;
 8000a90:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <main+0x1e0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	4b5e      	ldr	r3, [pc, #376]	; (8000c10 <main+0x1e0>)
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4b5e      	ldr	r3, [pc, #376]	; (8000c14 <main+0x1e4>)
 8000a9c:	701a      	strb	r2, [r3, #0]
		  runState = RS_ESTOP;
 8000a9e:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <main+0x1dc>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	701a      	strb	r2, [r3, #0]
	  }
	  switch ( runState ) {
 8000aa4:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <main+0x1dc>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d900      	bls.n	8000aae <main+0x7e>
 8000aac:	e09d      	b.n	8000bea <main+0x1ba>
 8000aae:	009a      	lsls	r2, r3, #2
 8000ab0:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <main+0x1fc>)
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	469f      	mov	pc, r3
	  	  // odottaa käynnistyskäskyä normaalissa ajotilassa
		  case RS_IDLE : {
			  if ( in_start ) {
 8000ab8:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <main+0x200>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d100      	bne.n	8000ac2 <main+0x92>
 8000ac0:	e095      	b.n	8000bee <main+0x1be>
				  out_run_fwd = true;
 8000ac2:	4b54      	ldr	r3, [pc, #336]	; (8000c14 <main+0x1e4>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
				  if ( in_flush ) {
 8000ac8:	4b5a      	ldr	r3, [pc, #360]	; (8000c34 <main+0x204>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00b      	beq.n	8000ae8 <main+0xb8>
					  setLED(L_ON, C_GREEN );
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff ff22 	bl	800091c <_Z6setLED9_ledState9_ledColor>
					  setRunDelay( MAX_FLUSHING_TIME );
 8000ad8:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <main+0x208>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fe2a 	bl	8000734 <_Z11setRunDelaym>
					  runState = RS_FLUSHING;
 8000ae0:	4b4a      	ldr	r3, [pc, #296]	; (8000c0c <main+0x1dc>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e00e      	b.n	8000b06 <main+0xd6>
				  }
				  else {
					  setLED( L_BLINK, C_BLUE );
 8000ae8:	2101      	movs	r1, #1
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff ff16 	bl	800091c <_Z6setLED9_ledState9_ledColor>
					  setRunDelay( getTimeSetpoint( MAX_RUNNING_TIME ) );
 8000af0:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <main+0x20c>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff ff78 	bl	80009e8 <_Z15getTimeSetpointm>
 8000af8:	0003      	movs	r3, r0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fe1a 	bl	8000734 <_Z11setRunDelaym>
					  runState = RS_RUNNING;
 8000b00:	4b42      	ldr	r3, [pc, #264]	; (8000c0c <main+0x1dc>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
				  }
				  do {  // odotetaan että starttinappi päästetään
					  getInputs();
 8000b06:	f7ff fe6d 	bl	80007e4 <_Z9getInputsv>
					  if ( !getRunDelay() ) {	// varmistus jos käyttäjä roikkuu napissa tai se hirttää
 8000b0a:	f7ff fe21 	bl	8000750 <_Z11getRunDelayv>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	425a      	negs	r2, r3
 8000b12:	4153      	adcs	r3, r2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <main+0xf0>
						  out_run_fwd = false;
 8000b1a:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <main+0x1e4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
				  do {  // odotetaan että starttinappi päästetään
 8000b20:	4b43      	ldr	r3, [pc, #268]	; (8000c30 <main+0x200>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d062      	beq.n	8000bee <main+0x1be>
 8000b28:	e7ed      	b.n	8000b06 <main+0xd6>
			  }
			  break;
		  }
		  // pumppaus käynnissä
		  case RS_RUNNING : {
			  if ( !getRunDelay() ) {
 8000b2a:	f7ff fe11 	bl	8000750 <_Z11getRunDelayv>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	425a      	negs	r2, r3
 8000b32:	4153      	adcs	r3, r2
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d05b      	beq.n	8000bf2 <main+0x1c2>
				  out_run_fwd = false;
 8000b3a:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <main+0x1e4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
				  out_run_rev = true;
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <main+0x1e0>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
				  setLED( L_OFF, C_ALL );
 8000b46:	2102      	movs	r1, #2
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fee7 	bl	800091c <_Z6setLED9_ledState9_ledColor>
				  setRunDelay( RETRACTING_TIME );
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <main+0x210>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fdef 	bl	8000734 <_Z11setRunDelaym>
				  runState = RS_RETRACTING;
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <main+0x1dc>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000b5c:	e049      	b.n	8000bf2 <main+0x1c2>
		  }
		  // litkun takaisinimaisu pumppauksen päätteeksi, estetään tipan valuminen suutimesta
		  case RS_RETRACTING : {
			  if ( !getRunDelay() ) {
 8000b5e:	f7ff fdf7 	bl	8000750 <_Z11getRunDelayv>
 8000b62:	0003      	movs	r3, r0
 8000b64:	425a      	negs	r2, r3
 8000b66:	4153      	adcs	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d043      	beq.n	8000bf6 <main+0x1c6>
				  out_run_fwd = false;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <main+0x1e4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
				  out_run_rev = false;
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <main+0x1e0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
				  setLED( L_OFF, C_ALL );
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fecd 	bl	800091c <_Z6setLED9_ledState9_ledColor>
				  runState = RS_IDLE;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <main+0x1dc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000b88:	e035      	b.n	8000bf6 <main+0x1c6>
		  }
		  // huuhtelukäyttö
		  case RS_FLUSHING : {
			  if ( in_start || !getRunDelay() ) {
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <main+0x200>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <main+0x16a>
 8000b92:	f7ff fddd 	bl	8000750 <_Z11getRunDelayv>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d101      	bne.n	8000b9e <main+0x16e>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <main+0x170>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d02a      	beq.n	8000bfa <main+0x1ca>
				  out_run_fwd = false;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <main+0x1e4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
				  putOutputs();
 8000baa:	f7ff fe4f 	bl	800084c <_Z10putOutputsv>
				  do {
					  getInputs();
 8000bae:	f7ff fe19 	bl	80007e4 <_Z9getInputsv>
				  do {
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <main+0x200>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d000      	beq.n	8000bbc <main+0x18c>
 8000bba:	e7f8      	b.n	8000bae <main+0x17e>
				  } while ( in_start );
				  runState = RS_IDLE;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <main+0x1dc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000bc2:	e01a      	b.n	8000bfa <main+0x1ca>
		  }
		  case RS_ESTOP : {
			  if ( !in_estop ) {
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <main+0x1f8>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4053      	eors	r3, r2
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d015      	beq.n	8000bfe <main+0x1ce>
				  setLED(L_ON, C_GREEN );
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff fea1 	bl	800091c <_Z6setLED9_ledState9_ledColor>
				  runState = RS_IDLE;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <main+0x1dc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
				  println("RUNSTATE ESTOP -> IDLE");
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <main+0x214>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fdec 	bl	80007c0 <_Z7printlnPKc>
			  }
			  break;
 8000be8:	e009      	b.n	8000bfe <main+0x1ce>
		  }
		  default : {
			  // virhe. Tänne ei pitäisi joutua koskaan
			  break;
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	e008      	b.n	8000c00 <main+0x1d0>
			  break;
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	e006      	b.n	8000c00 <main+0x1d0>
			  break;
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	e004      	b.n	8000c00 <main+0x1d0>
			  break;
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	e002      	b.n	8000c00 <main+0x1d0>
			  break;
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	e000      	b.n	8000c00 <main+0x1d0>
			  break;
 8000bfe:	46c0      	nop			; (mov r8, r8)
		  }
	  }
	  doBlink();
 8000c00:	f7ff fec8 	bl	8000994 <_Z7doBlinkv>
	  putOutputs();
 8000c04:	f7ff fe22 	bl	800084c <_Z10putOutputsv>
	  getInputs();
 8000c08:	e73a      	b.n	8000a80 <main+0x50>
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	20000087 	.word	0x20000087
 8000c10:	2000008c 	.word	0x2000008c
 8000c14:	2000008b 	.word	0x2000008b
 8000c18:	080035a0 	.word	0x080035a0
 8000c1c:	080035cc 	.word	0x080035cc
 8000c20:	080035d8 	.word	0x080035d8
 8000c24:	080035dc 	.word	0x080035dc
 8000c28:	2000008a 	.word	0x2000008a
 8000c2c:	08003600 	.word	0x08003600
 8000c30:	20000089 	.word	0x20000089
 8000c34:	20000088 	.word	0x20000088
 8000c38:	0000ea60 	.word	0x0000ea60
 8000c3c:	00007530 	.word	0x00007530
 8000c40:	00000bb8 	.word	0x00000bb8
 8000c44:	080035e8 	.word	0x080035e8

08000c48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b099      	sub	sp, #100	; 0x64
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	242c      	movs	r4, #44	; 0x2c
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	0018      	movs	r0, r3
 8000c54:	2334      	movs	r3, #52	; 0x34
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f002 fc8b 	bl	8003574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5e:	2318      	movs	r3, #24
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	0018      	movs	r0, r3
 8000c64:	2314      	movs	r3, #20
 8000c66:	001a      	movs	r2, r3
 8000c68:	2100      	movs	r1, #0
 8000c6a:	f002 fc83 	bl	8003574 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6e:	003b      	movs	r3, r7
 8000c70:	0018      	movs	r0, r3
 8000c72:	2318      	movs	r3, #24
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f002 fc7c 	bl	8003574 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <_Z18SystemClock_Configv+0xf4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <_Z18SystemClock_Configv+0xf8>)
 8000c82:	401a      	ands	r2, r3
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <_Z18SystemClock_Configv+0xf4>)
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0109      	lsls	r1, r1, #4
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8e:	0021      	movs	r1, r4
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2202      	movs	r2, #2
 8000c94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2201      	movs	r2, #1
 8000c9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	02d2      	lsls	r2, r2, #11
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	03d2      	lsls	r2, r2, #15
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 f867 	bl	8001d94 <HAL_RCC_OscConfig>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	4193      	sbcs	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000cd2:	f000 f837 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd6:	2118      	movs	r1, #24
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	220f      	movs	r2, #15
 8000cdc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fbc6 	bl	800248c <HAL_RCC_ClockConfig>
 8000d00:	0003      	movs	r3, r0
 8000d02:	1e5a      	subs	r2, r3, #1
 8000d04:	4193      	sbcs	r3, r2
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000d0c:	f000 f81a 	bl	8000d44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d10:	003b      	movs	r3, r7
 8000d12:	2202      	movs	r2, #2
 8000d14:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d16:	003b      	movs	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	003b      	movs	r3, r7
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 fdd8 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	0003      	movs	r3, r0
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	4193      	sbcs	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8000d30:	f000 f808 	bl	8000d44 <Error_Handler>
  }
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b019      	add	sp, #100	; 0x64
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	ffffe7ff 	.word	0xffffe7ff

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_MspInit+0x24>)
 8000d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x24>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_MspInit+0x24>)
 8000d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_MspInit+0x24>)
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	0549      	lsls	r1, r1, #21
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if ( delayCounter[0]) delayCounter[0]--;
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <SysTick_Handler+0x34>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <SysTick_Handler+0x16>
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <SysTick_Handler+0x34>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <SysTick_Handler+0x34>)
 8000dac:	601a      	str	r2, [r3, #0]
	if ( delayCounter[1]) delayCounter[1]--;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <SysTick_Handler+0x34>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d004      	beq.n	8000dc0 <SysTick_Handler+0x28>
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Handler+0x34>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	1e5a      	subs	r2, r3, #1
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <SysTick_Handler+0x34>)
 8000dbe:	605a      	str	r2, [r3, #4]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f8fe 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000090 	.word	0x20000090

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <MX_USART2_UART_Init+0x5c>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000de8:	22e1      	movs	r2, #225	; 0xe1
 8000dea:	0252      	lsls	r2, r2, #9
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <MX_USART2_UART_Init+0x58>)
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 fe7d 	bl	8002b20 <HAL_UART_Init>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e2a:	f7ff ff8b 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000098 	.word	0x20000098
 8000e38:	40004400 	.word	0x40004400

08000e3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	240c      	movs	r4, #12
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f002 fb90 	bl	8003574 <memset>
  if(uartHandle->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0x80>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d129      	bne.n	8000eb2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0289      	lsls	r1, r1, #10
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e84:	0021      	movs	r1, r4
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	220c      	movs	r2, #12
 8000e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	187a      	adds	r2, r7, r1
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fdc9 	bl	8001a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b009      	add	sp, #36	; 0x24
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ec6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eee:	f7ff ff6f 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 fb1b 	bl	800352c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fd9b 	bl	8000a30 <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
   ldr   r0, =_estack
 8000efc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f08:	08003690 	.word	0x08003690
  ldr r2, =_sbss
 8000f0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f10:	20000120 	.word	0x20000120

08000f14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_COMP_IRQHandler>
	...

08000f18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x3c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Init+0x3c>)
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f811 	bl	8000f58 <HAL_InitTick>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e001      	b.n	8000f46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f42:	f7ff ff05 	bl	8000d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x60>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	0019      	movs	r1, r3
 8000f6a:	23fa      	movs	r3, #250	; 0xfa
 8000f6c:	0098      	lsls	r0, r3, #2
 8000f6e:	f7ff f8d3 	bl	8000118 <__udivsi3>
 8000f72:	0003      	movs	r3, r0
 8000f74:	0019      	movs	r1, r3
 8000f76:	0020      	movs	r0, r4
 8000f78:	f7ff f8ce 	bl	8000118 <__udivsi3>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 fd53 	bl	8001a2a <HAL_SYSTICK_Config>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e00f      	b.n	8000fac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d80b      	bhi.n	8000faa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	2301      	movs	r3, #1
 8000f96:	425b      	negs	r3, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fd30 	bl	8001a00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_InitTick+0x64>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	001a      	movs	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	18d2      	adds	r2, r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	2000011c 	.word	0x2000011c

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	2000011c 	.word	0x2000011c

08000ff8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e159      	b.n	80012be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2250      	movs	r2, #80	; 0x50
 800101c:	2100      	movs	r1, #0
 800101e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff faac 	bl	8000580 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	2210      	movs	r2, #16
 800102e:	4013      	ands	r3, r2
 8001030:	2b10      	cmp	r3, #16
 8001032:	d005      	beq.n	8001040 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2204      	movs	r2, #4
 800103c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800103e:	d00b      	beq.n	8001058 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001044:	2210      	movs	r2, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2250      	movs	r2, #80	; 0x50
 8001050:	2100      	movs	r1, #0
 8001052:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e132      	b.n	80012be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105c:	4a9a      	ldr	r2, [pc, #616]	; (80012c8 <HAL_ADC_Init+0x2d0>)
 800105e:	4013      	ands	r3, r2
 8001060:	2202      	movs	r2, #2
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2203      	movs	r2, #3
 8001070:	4013      	ands	r3, r2
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <HAL_ADC_Init+0x90>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	4013      	ands	r3, r2
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_ADC_Init+0x90>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <HAL_ADC_Init+0x92>
 8001088:	2300      	movs	r3, #0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d149      	bne.n	8001122 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	23c0      	movs	r3, #192	; 0xc0
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	429a      	cmp	r2, r3
 8001098:	d00b      	beq.n	80010b2 <HAL_ADC_Init+0xba>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d005      	beq.n	80010b2 <HAL_ADC_Init+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	061b      	lsls	r3, r3, #24
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d111      	bne.n	80010d6 <HAL_ADC_Init+0xde>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0092      	lsls	r2, r2, #2
 80010be:	0892      	lsrs	r2, r2, #2
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6919      	ldr	r1, [r3, #16]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	e014      	b.n	8001100 <HAL_ADC_Init+0x108>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	0892      	lsrs	r2, r2, #2
 80010e4:	611a      	str	r2, [r3, #16]
 80010e6:	4b79      	ldr	r3, [pc, #484]	; (80012cc <HAL_ADC_Init+0x2d4>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b78      	ldr	r3, [pc, #480]	; (80012cc <HAL_ADC_Init+0x2d4>)
 80010ec:	4978      	ldr	r1, [pc, #480]	; (80012d0 <HAL_ADC_Init+0x2d8>)
 80010ee:	400a      	ands	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_ADC_Init+0x2d4>)
 80010f4:	6819      	ldr	r1, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4b74      	ldr	r3, [pc, #464]	; (80012cc <HAL_ADC_Init+0x2d4>)
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2118      	movs	r1, #24
 800110c:	438a      	bics	r2, r1
 800110e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68d9      	ldr	r1, [r3, #12]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001122:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <HAL_ADC_Init+0x2d4>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b69      	ldr	r3, [pc, #420]	; (80012cc <HAL_ADC_Init+0x2d4>)
 8001128:	496a      	ldr	r1, [pc, #424]	; (80012d4 <HAL_ADC_Init+0x2dc>)
 800112a:	400a      	ands	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <HAL_ADC_Init+0x2d4>)
 8001130:	6819      	ldr	r1, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001136:	065a      	lsls	r2, r3, #25
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <HAL_ADC_Init+0x2d4>)
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	055b      	lsls	r3, r3, #21
 8001148:	4013      	ands	r3, r2
 800114a:	d108      	bne.n	800115e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0549      	lsls	r1, r1, #21
 800115a:	430a      	orrs	r2, r1
 800115c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	495b      	ldr	r1, [pc, #364]	; (80012d8 <HAL_ADC_Init+0x2e0>)
 800116a:	400a      	ands	r2, r1
 800116c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68d9      	ldr	r1, [r3, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d101      	bne.n	8001184 <HAL_ADC_Init+0x18c>
 8001180:	2304      	movs	r3, #4
 8001182:	e000      	b.n	8001186 <HAL_ADC_Init+0x18e>
 8001184:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001186:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2020      	movs	r0, #32
 800118c:	5c1b      	ldrb	r3, [r3, r0]
 800118e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001190:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	202c      	movs	r0, #44	; 0x2c
 8001196:	5c1b      	ldrb	r3, [r3, r0]
 8001198:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800119a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011be:	23c2      	movs	r3, #194	; 0xc2
 80011c0:	33ff      	adds	r3, #255	; 0xff
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d00b      	beq.n	80011de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68d9      	ldr	r1, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2221      	movs	r2, #33	; 0x21
 80011e2:	5c9b      	ldrb	r3, [r3, r2]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d11a      	bne.n	800121e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2220      	movs	r2, #32
 80011ec:	5c9b      	ldrb	r3, [r3, r2]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	0249      	lsls	r1, r1, #9
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	e00b      	b.n	800121e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120a:	2220      	movs	r2, #32
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	2201      	movs	r2, #1
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001222:	2b01      	cmp	r3, #1
 8001224:	d11f      	bne.n	8001266 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	492a      	ldr	r1, [pc, #168]	; (80012dc <HAL_ADC_Init+0x2e4>)
 8001232:	400a      	ands	r2, r1
 8001234:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6919      	ldr	r1, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001244:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800124a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2101      	movs	r1, #1
 8001260:	430a      	orrs	r2, r1
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	e00e      	b.n	8001284 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2201      	movs	r2, #1
 800126e:	4013      	ands	r3, r2
 8001270:	2b01      	cmp	r3, #1
 8001272:	d107      	bne.n	8001284 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2101      	movs	r1, #1
 8001280:	438a      	bics	r2, r1
 8001282:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2107      	movs	r1, #7
 8001290:	438a      	bics	r2, r1
 8001292:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6959      	ldr	r1, [r3, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	2203      	movs	r2, #3
 80012b2:	4393      	bics	r3, r2
 80012b4:	2201      	movs	r2, #1
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	fffffefd 	.word	0xfffffefd
 80012cc:	40012708 	.word	0x40012708
 80012d0:	ffc3ffff 	.word	0xffc3ffff
 80012d4:	fdffffff 	.word	0xfdffffff
 80012d8:	fffe0219 	.word	0xfffe0219
 80012dc:	fffffc03 	.word	0xfffffc03

080012e0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	230f      	movs	r3, #15
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2204      	movs	r2, #4
 80012f8:	4013      	ands	r3, r2
 80012fa:	d138      	bne.n	800136e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2250      	movs	r2, #80	; 0x50
 8001300:	5c9b      	ldrb	r3, [r3, r2]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Start+0x2a>
 8001306:	2302      	movs	r3, #2
 8001308:	e038      	b.n	800137c <HAL_ADC_Start+0x9c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2250      	movs	r2, #80	; 0x50
 800130e:	2101      	movs	r1, #1
 8001310:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d007      	beq.n	800132a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800131a:	230f      	movs	r3, #15
 800131c:	18fc      	adds	r4, r7, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f000 f99f 	bl	8001664 <ADC_Enable>
 8001326:	0003      	movs	r3, r0
 8001328:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800132a:	230f      	movs	r3, #15
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d120      	bne.n	8001376 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_ADC_Start+0xa4>)
 800133a:	4013      	ands	r3, r2
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	0052      	lsls	r2, r2, #1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2250      	movs	r2, #80	; 0x50
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	221c      	movs	r2, #28
 800135a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2104      	movs	r1, #4
 8001368:	430a      	orrs	r2, r1
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e003      	b.n	8001376 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	2202      	movs	r2, #2
 8001374:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b005      	add	sp, #20
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	fffff0fe 	.word	0xfffff0fe

08001388 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	230f      	movs	r3, #15
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2250      	movs	r2, #80	; 0x50
 800139c:	5c9b      	ldrb	r3, [r3, r2]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Stop+0x1e>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e029      	b.n	80013fa <HAL_ADC_Stop+0x72>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2250      	movs	r2, #80	; 0x50
 80013aa:	2101      	movs	r1, #1
 80013ac:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013ae:	250f      	movs	r5, #15
 80013b0:	197c      	adds	r4, r7, r5
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 fa24 	bl	8001802 <ADC_ConversionStop>
 80013ba:	0003      	movs	r3, r0
 80013bc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d112      	bne.n	80013ec <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80013c6:	197c      	adds	r4, r7, r5
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f9b2 	bl	8001734 <ADC_Disable>
 80013d0:	0003      	movs	r3, r0
 80013d2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013d4:	197b      	adds	r3, r7, r5
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d107      	bne.n	80013ec <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_ADC_Stop+0x7c>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	2201      	movs	r2, #1
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2250      	movs	r2, #80	; 0x50
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013f4:	230f      	movs	r3, #15
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	781b      	ldrb	r3, [r3, #0]
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b004      	add	sp, #16
 8001400:	bdb0      	pop	{r4, r5, r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	fffffefe 	.word	0xfffffefe

08001408 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b08      	cmp	r3, #8
 8001420:	d102      	bne.n	8001428 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001422:	2308      	movs	r3, #8
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e014      	b.n	8001452 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	2b01      	cmp	r3, #1
 8001434:	d10b      	bne.n	800144e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143a:	2220      	movs	r2, #32
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2250      	movs	r2, #80	; 0x50
 8001446:	2100      	movs	r1, #0
 8001448:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e072      	b.n	8001534 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800144e:	230c      	movs	r3, #12
 8001450:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001452:	f7ff fdc7 	bl	8000fe4 <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800145a:	e01f      	b.n	800149c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	d01c      	beq.n	800149c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_ADC_PollForConversion+0x70>
 8001468:	f7ff fdbc 	bl	8000fe4 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d211      	bcs.n	800149c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	d10b      	bne.n	800149c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001488:	2204      	movs	r2, #4
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2250      	movs	r2, #80	; 0x50
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e04b      	b.n	8001534 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0d9      	beq.n	800145c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	23c0      	movs	r3, #192	; 0xc0
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	4013      	ands	r3, r2
 80014c2:	d12e      	bne.n	8001522 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2220      	movs	r2, #32
 80014c8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d129      	bne.n	8001522 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2208      	movs	r2, #8
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d122      	bne.n	8001522 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2204      	movs	r2, #4
 80014e4:	4013      	ands	r3, r2
 80014e6:	d110      	bne.n	800150a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	210c      	movs	r1, #12
 80014f4:	438a      	bics	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_ADC_PollForConversion+0x134>)
 80014fe:	4013      	ands	r3, r2
 8001500:	2201      	movs	r2, #1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
 8001508:	e00b      	b.n	8001522 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150e:	2220      	movs	r2, #32
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	2201      	movs	r2, #1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}
 800153c:	fffffefe 	.word	0xfffffefe

08001540 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2250      	movs	r2, #80	; 0x50
 8001566:	5c9b      	ldrb	r3, [r3, r2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x18>
 800156c:	2302      	movs	r3, #2
 800156e:	e06c      	b.n	800164a <HAL_ADC_ConfigChannel+0xf2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2250      	movs	r2, #80	; 0x50
 8001574:	2101      	movs	r1, #1
 8001576:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2204      	movs	r2, #4
 8001580:	4013      	ands	r3, r2
 8001582:	d00b      	beq.n	800159c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001588:	2220      	movs	r2, #32
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2250      	movs	r2, #80	; 0x50
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e056      	b.n	800164a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <HAL_ADC_ConfigChannel+0xfc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d028      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	035b      	lsls	r3, r3, #13
 80015b2:	0b5a      	lsrs	r2, r3, #13
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	02db      	lsls	r3, r3, #11
 80015c4:	4013      	ands	r3, r2
 80015c6:	d009      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0409      	lsls	r1, r1, #16
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f000 f960 	bl	800189c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	029b      	lsls	r3, r3, #10
 80015e4:	4013      	ands	r3, r2
 80015e6:	d02b      	beq.n	8001640 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	03c9      	lsls	r1, r1, #15
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e023      	b.n	8001640 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	035b      	lsls	r3, r3, #13
 8001604:	0b5b      	lsrs	r3, r3, #13
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	02db      	lsls	r3, r3, #11
 8001618:	4013      	ands	r3, r2
 800161a:	d005      	beq.n	8001628 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_ADC_ConfigChannel+0x104>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d005      	beq.n	8001640 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_ADC_ConfigChannel+0x100>)
 800163a:	4909      	ldr	r1, [pc, #36]	; (8001660 <HAL_ADC_ConfigChannel+0x108>)
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2250      	movs	r2, #80	; 0x50
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	00001001 	.word	0x00001001
 8001658:	40012708 	.word	0x40012708
 800165c:	ff7fffff 	.word	0xff7fffff
 8001660:	ffbfffff 	.word	0xffbfffff

08001664 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2203      	movs	r2, #3
 8001678:	4013      	ands	r3, r2
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <ADC_Enable+0x2c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	4013      	ands	r3, r2
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <ADC_Enable+0x2c>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <ADC_Enable+0x2e>
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d146      	bne.n	8001724 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <ADC_Enable+0xcc>)
 800169e:	4013      	ands	r3, r2
 80016a0:	d00d      	beq.n	80016be <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a6:	2210      	movs	r2, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	2201      	movs	r2, #1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e033      	b.n	8001726 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f000 f8e4 	bl	800189c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fc86 	bl	8000fe4 <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016dc:	e01b      	b.n	8001716 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016de:	f7ff fc81 	bl	8000fe4 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b0a      	cmp	r3, #10
 80016ea:	d914      	bls.n	8001716 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2201      	movs	r2, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d00d      	beq.n	8001716 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	2210      	movs	r2, #16
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	2201      	movs	r2, #1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e007      	b.n	8001726 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	2b01      	cmp	r3, #1
 8001722:	d1dc      	bne.n	80016de <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	80000017 	.word	0x80000017

08001734 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b01      	cmp	r3, #1
 800174c:	d108      	bne.n	8001760 <ADC_Disable+0x2c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <ADC_Disable+0x2c>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <ADC_Disable+0x2e>
 8001760:	2300      	movs	r3, #0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d048      	beq.n	80017f8 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2205      	movs	r2, #5
 800176e:	4013      	ands	r3, r2
 8001770:	2b01      	cmp	r3, #1
 8001772:	d110      	bne.n	8001796 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2102      	movs	r1, #2
 8001780:	430a      	orrs	r2, r1
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2203      	movs	r2, #3
 800178a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800178c:	f7ff fc2a 	bl	8000fe4 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001794:	e029      	b.n	80017ea <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	2210      	movs	r2, #16
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	2201      	movs	r2, #1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e023      	b.n	80017fa <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017b2:	f7ff fc17 	bl	8000fe4 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b0a      	cmp	r3, #10
 80017be:	d914      	bls.n	80017ea <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10d      	bne.n	80017ea <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	2210      	movs	r2, #16
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	2201      	movs	r2, #1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e007      	b.n	80017fa <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d0dc      	beq.n	80017b2 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}

08001802 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	d03a      	beq.n	8001890 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2204      	movs	r2, #4
 8001822:	4013      	ands	r3, r2
 8001824:	2b04      	cmp	r3, #4
 8001826:	d10d      	bne.n	8001844 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2202      	movs	r2, #2
 8001830:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001832:	d107      	bne.n	8001844 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2110      	movs	r1, #16
 8001840:	430a      	orrs	r2, r1
 8001842:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001844:	f7ff fbce 	bl	8000fe4 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800184c:	e01a      	b.n	8001884 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800184e:	f7ff fbc9 	bl	8000fe4 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b0a      	cmp	r3, #10
 800185a:	d913      	bls.n	8001884 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2204      	movs	r2, #4
 8001864:	4013      	ands	r3, r2
 8001866:	d00d      	beq.n	8001884 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	2210      	movs	r2, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	2201      	movs	r2, #1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e006      	b.n	8001892 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	d1de      	bne.n	800184e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <ADC_DelayMicroSecond+0x38>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	490b      	ldr	r1, [pc, #44]	; (80018d8 <ADC_DelayMicroSecond+0x3c>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7fe fc34 	bl	8000118 <__udivsi3>
 80018b0:	0003      	movs	r3, r0
 80018b2:	001a      	movs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4353      	muls	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80018ba:	e002      	b.n	80018c2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3b01      	subs	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <ADC_DelayMicroSecond+0x20>
  } 
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	20000000 	.word	0x20000000
 80018d8:	000f4240 	.word	0x000f4240

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	0002      	movs	r2, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b7f      	cmp	r3, #127	; 0x7f
 80018f0:	d828      	bhi.n	8001944 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f2:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <__NVIC_SetPriority+0xd4>)
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	33c0      	adds	r3, #192	; 0xc0
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	589b      	ldr	r3, [r3, r2]
 8001902:	1dfa      	adds	r2, r7, #7
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	0011      	movs	r1, r2
 8001908:	2203      	movs	r2, #3
 800190a:	400a      	ands	r2, r1
 800190c:	00d2      	lsls	r2, r2, #3
 800190e:	21ff      	movs	r1, #255	; 0xff
 8001910:	4091      	lsls	r1, r2
 8001912:	000a      	movs	r2, r1
 8001914:	43d2      	mvns	r2, r2
 8001916:	401a      	ands	r2, r3
 8001918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	019b      	lsls	r3, r3, #6
 800191e:	22ff      	movs	r2, #255	; 0xff
 8001920:	401a      	ands	r2, r3
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	0018      	movs	r0, r3
 8001928:	2303      	movs	r3, #3
 800192a:	4003      	ands	r3, r0
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001930:	481f      	ldr	r0, [pc, #124]	; (80019b0 <__NVIC_SetPriority+0xd4>)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b25b      	sxtb	r3, r3
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	430a      	orrs	r2, r1
 800193c:	33c0      	adds	r3, #192	; 0xc0
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001942:	e031      	b.n	80019a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001944:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <__NVIC_SetPriority+0xd8>)
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	0019      	movs	r1, r3
 800194c:	230f      	movs	r3, #15
 800194e:	400b      	ands	r3, r1
 8001950:	3b08      	subs	r3, #8
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3306      	adds	r3, #6
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	3304      	adds	r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1dfa      	adds	r2, r7, #7
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	0011      	movs	r1, r2
 8001964:	2203      	movs	r2, #3
 8001966:	400a      	ands	r2, r1
 8001968:	00d2      	lsls	r2, r2, #3
 800196a:	21ff      	movs	r1, #255	; 0xff
 800196c:	4091      	lsls	r1, r2
 800196e:	000a      	movs	r2, r1
 8001970:	43d2      	mvns	r2, r2
 8001972:	401a      	ands	r2, r3
 8001974:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	22ff      	movs	r2, #255	; 0xff
 800197c:	401a      	ands	r2, r3
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	2303      	movs	r3, #3
 8001986:	4003      	ands	r3, r0
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4809      	ldr	r0, [pc, #36]	; (80019b4 <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	001c      	movs	r4, r3
 8001994:	230f      	movs	r3, #15
 8001996:	4023      	ands	r3, r4
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	430a      	orrs	r2, r1
 800199e:	3306      	adds	r3, #6
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	18c3      	adds	r3, r0, r3
 80019a4:	3304      	adds	r3, #4
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b003      	add	sp, #12
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	1e5a      	subs	r2, r3, #1
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	045b      	lsls	r3, r3, #17
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d301      	bcc.n	80019d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019cc:	2301      	movs	r3, #1
 80019ce:	e010      	b.n	80019f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <SysTick_Config+0x44>)
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	3a01      	subs	r2, #1
 80019d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d8:	2301      	movs	r3, #1
 80019da:	425b      	negs	r3, r3
 80019dc:	2103      	movs	r1, #3
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff ff7c 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x44>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x44>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	1c02      	adds	r2, r0, #0
 8001a10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b004      	add	sp, #16
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ffbf 	bl	80019b8 <SysTick_Config>
 8001a3a:	0003      	movs	r3, r0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a5a:	e149      	b.n	8001cf0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4091      	lsls	r1, r2
 8001a66:	000a      	movs	r2, r1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <HAL_GPIO_Init+0x30>
 8001a72:	e13a      	b.n	8001cea <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d005      	beq.n	8001a8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d130      	bne.n	8001aee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	43da      	mvns	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	2201      	movs	r2, #1
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2203      	movs	r2, #3
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d017      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2203      	movs	r2, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d123      	bne.n	8001b7e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	58d3      	ldr	r3, [r2, r3]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2207      	movs	r2, #7
 8001b48:	4013      	ands	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	43da      	mvns	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2107      	movs	r1, #7
 8001b62:	400b      	ands	r3, r1
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	6939      	ldr	r1, [r7, #16]
 8001b7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	029b      	lsls	r3, r3, #10
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d100      	bne.n	8001bc0 <HAL_GPIO_Init+0x17c>
 8001bbe:	e094      	b.n	8001cea <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc0:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_GPIO_Init+0x2c4>)
 8001bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_GPIO_Init+0x2c4>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bcc:	4a4f      	ldr	r2, [pc, #316]	; (8001d0c <HAL_GPIO_Init+0x2c8>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	589b      	ldr	r3, [r3, r2]
 8001bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4013      	ands	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	43da      	mvns	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	23a0      	movs	r3, #160	; 0xa0
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x1de>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a44      	ldr	r2, [pc, #272]	; (8001d10 <HAL_GPIO_Init+0x2cc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x1da>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a43      	ldr	r2, [pc, #268]	; (8001d14 <HAL_GPIO_Init+0x2d0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x1d6>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a42      	ldr	r2, [pc, #264]	; (8001d18 <HAL_GPIO_Init+0x2d4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x1d2>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x1e0>
 8001c16:	2306      	movs	r3, #6
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x1e0>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x1e0>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x1e0>
 8001c22:	2300      	movs	r3, #0
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	2103      	movs	r1, #3
 8001c28:	400a      	ands	r2, r1
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	4935      	ldr	r1, [pc, #212]	; (8001d0c <HAL_GPIO_Init+0x2c8>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	025b      	lsls	r3, r3, #9
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43da      	mvns	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4013      	ands	r3, r2
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	035b      	lsls	r3, r3, #13
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	039b      	lsls	r3, r3, #14
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_GPIO_Init+0x2d8>)
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	40da      	lsrs	r2, r3
 8001cf8:	1e13      	subs	r3, r2, #0
 8001cfa:	d000      	beq.n	8001cfe <HAL_GPIO_Init+0x2ba>
 8001cfc:	e6ae      	b.n	8001a5c <HAL_GPIO_Init+0x18>
  }
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b006      	add	sp, #24
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	50000400 	.word	0x50000400
 8001d14:	50000800 	.word	0x50000800
 8001d18:	50001c00 	.word	0x50001c00
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	000a      	movs	r2, r1
 8001d2a:	1cbb      	adds	r3, r7, #2
 8001d2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	1cba      	adds	r2, r7, #2
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	4013      	ands	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e003      	b.n	8001d4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d44:	230f      	movs	r3, #15
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	781b      	ldrb	r3, [r3, #0]
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	0008      	movs	r0, r1
 8001d64:	0011      	movs	r1, r2
 8001d66:	1cbb      	adds	r3, r7, #2
 8001d68:	1c02      	adds	r2, r0, #0
 8001d6a:	801a      	strh	r2, [r3, #0]
 8001d6c:	1c7b      	adds	r3, r7, #1
 8001d6e:	1c0a      	adds	r2, r1, #0
 8001d70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d72:	1c7b      	adds	r3, r7, #1
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	1cbb      	adds	r3, r7, #2
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001d82:	e003      	b.n	8001d8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001d84:	1cbb      	adds	r3, r7, #2
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f000 fb6c 	bl	8002480 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da8:	4bc8      	ldr	r3, [pc, #800]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	220c      	movs	r2, #12
 8001dae:	4013      	ands	r3, r2
 8001db0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db2:	4bc6      	ldr	r3, [pc, #792]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d100      	bne.n	8001dca <HAL_RCC_OscConfig+0x36>
 8001dc8:	e07d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d007      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x68>
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	025b      	lsls	r3, r3, #9
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10d      	bne.n	8001dfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4bba      	ldr	r3, [pc, #744]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	d100      	bne.n	8001dee <HAL_RCC_OscConfig+0x5a>
 8001dec:	e06a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x130>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d166      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f000 fb42 	bl	8002480 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_OscConfig+0x84>
 8001e08:	4bb0      	ldr	r3, [pc, #704]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4baf      	ldr	r3, [pc, #700]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	0249      	lsls	r1, r1, #9
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e027      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	23a0      	movs	r3, #160	; 0xa0
 8001e1e:	02db      	lsls	r3, r3, #11
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d10e      	bne.n	8001e42 <HAL_RCC_OscConfig+0xae>
 8001e24:	4ba9      	ldr	r3, [pc, #676]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4ba8      	ldr	r3, [pc, #672]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	02c9      	lsls	r1, r1, #11
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	4ba6      	ldr	r3, [pc, #664]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4ba5      	ldr	r3, [pc, #660]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	0249      	lsls	r1, r1, #9
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e012      	b.n	8001e68 <HAL_RCC_OscConfig+0xd4>
 8001e42:	4ba2      	ldr	r3, [pc, #648]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4ba1      	ldr	r3, [pc, #644]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e48:	49a1      	ldr	r1, [pc, #644]	; (80020d0 <HAL_RCC_OscConfig+0x33c>)
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	4b9f      	ldr	r3, [pc, #636]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4b9b      	ldr	r3, [pc, #620]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b9a      	ldr	r3, [pc, #616]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e62:	499c      	ldr	r1, [pc, #624]	; (80020d4 <HAL_RCC_OscConfig+0x340>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d014      	beq.n	8001e9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f8b8 	bl	8000fe4 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7a:	f7ff f8b3 	bl	8000fe4 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e2f9      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e8c:	4b8f      	ldr	r3, [pc, #572]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	4013      	ands	r3, r2
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0xe6>
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f8a3 	bl	8000fe4 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f89e 	bl	8000fe4 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e2e4      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eb6:	4b85      	ldr	r3, [pc, #532]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x110>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x13e>
 8001ed0:	e099      	b.n	8002006 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	2220      	movs	r2, #32
 8001edc:	4013      	ands	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ee0:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b79      	ldr	r3, [pc, #484]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2220      	movs	r2, #32
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d13e      	bne.n	8001f7e <HAL_RCC_OscConfig+0x1ea>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d13b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f06:	4b71      	ldr	r3, [pc, #452]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_RCC_OscConfig+0x186>
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e2b2      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b6c      	ldr	r3, [pc, #432]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a6e      	ldr	r2, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0x344>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	021a      	lsls	r2, r3, #8
 8001f2a:	4b68      	ldr	r3, [pc, #416]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f30:	4b66      	ldr	r3, [pc, #408]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2209      	movs	r2, #9
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	4b64      	ldr	r3, [pc, #400]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 fbeb 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8001f46:	0001      	movs	r1, r0
 8001f48:	4b60      	ldr	r3, [pc, #384]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	220f      	movs	r2, #15
 8001f50:	4013      	ands	r3, r2
 8001f52:	4a62      	ldr	r2, [pc, #392]	; (80020dc <HAL_RCC_OscConfig+0x348>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	000a      	movs	r2, r1
 8001f58:	40da      	lsrs	r2, r3
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_RCC_OscConfig+0x34c>)
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001f5e:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x350>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2513      	movs	r5, #19
 8001f64:	197c      	adds	r4, r7, r5
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7fe fff6 	bl	8000f58 <HAL_InitTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f70:	197b      	adds	r3, r7, r5
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d046      	beq.n	8002006 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001f78:	197b      	adds	r3, r7, r5
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	e280      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d027      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f84:	4b51      	ldr	r3, [pc, #324]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2209      	movs	r2, #9
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff f825 	bl	8000fe4 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f820 	bl	8000fe4 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e266      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fb2:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f1      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a45      	ldr	r2, [pc, #276]	; (80020d8 <HAL_RCC_OscConfig+0x344>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	021a      	lsls	r2, r3, #8
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	e018      	b.n	8002006 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	438a      	bics	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f800 	bl	8000fe4 <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fea:	f7fe fffb 	bl	8000fe4 <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e241      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ffc:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2204      	movs	r2, #4
 8002002:	4013      	ands	r3, r2
 8002004:	d1f1      	bne.n	8001fea <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2210      	movs	r2, #16
 800200c:	4013      	ands	r3, r2
 800200e:	d100      	bne.n	8002012 <HAL_RCC_OscConfig+0x27e>
 8002010:	e0a1      	b.n	8002156 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d140      	bne.n	800209a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d005      	beq.n	8002030 <HAL_RCC_OscConfig+0x29c>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e227      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a2c      	ldr	r2, [pc, #176]	; (80020e8 <HAL_RCC_OscConfig+0x354>)
 8002036:	4013      	ands	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1a      	ldr	r2, [r3, #32]
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	0a19      	lsrs	r1, r3, #8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	061a      	lsls	r2, r3, #24
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	0b5b      	lsrs	r3, r3, #13
 800205e:	3301      	adds	r3, #1
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	210f      	movs	r1, #15
 800206e:	400b      	ands	r3, r1
 8002070:	491a      	ldr	r1, [pc, #104]	; (80020dc <HAL_RCC_OscConfig+0x348>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCC_OscConfig+0x34c>)
 8002078:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_RCC_OscConfig+0x350>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2513      	movs	r5, #19
 8002080:	197c      	adds	r4, r7, r5
 8002082:	0018      	movs	r0, r3
 8002084:	f7fe ff68 	bl	8000f58 <HAL_InitTick>
 8002088:	0003      	movs	r3, r0
 800208a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800208c:	197b      	adds	r3, r7, r5
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d060      	beq.n	8002156 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002094:	197b      	adds	r3, r7, r5
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	e1f2      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03f      	beq.n	8002122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_OscConfig+0x338>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0049      	lsls	r1, r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe ff98 	bl	8000fe4 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020b8:	e018      	b.n	80020ec <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ba:	f7fe ff93 	bl	8000fe4 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d911      	bls.n	80020ec <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1d9      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	fffeffff 	.word	0xfffeffff
 80020d4:	fffbffff 	.word	0xfffbffff
 80020d8:	ffffe0ff 	.word	0xffffe0ff
 80020dc:	08003614 	.word	0x08003614
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004
 80020e8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020ec:	4bc9      	ldr	r3, [pc, #804]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d0e0      	beq.n	80020ba <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f8:	4bc6      	ldr	r3, [pc, #792]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4ac6      	ldr	r2, [pc, #792]	; (8002418 <HAL_RCC_OscConfig+0x684>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1a      	ldr	r2, [r3, #32]
 8002106:	4bc3      	ldr	r3, [pc, #780]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210c:	4bc1      	ldr	r3, [pc, #772]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	0a19      	lsrs	r1, r3, #8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	061a      	lsls	r2, r3, #24
 800211a:	4bbe      	ldr	r3, [pc, #760]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800211c:	430a      	orrs	r2, r1
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	e019      	b.n	8002156 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002122:	4bbc      	ldr	r3, [pc, #752]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4bbb      	ldr	r3, [pc, #748]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002128:	49bc      	ldr	r1, [pc, #752]	; (800241c <HAL_RCC_OscConfig+0x688>)
 800212a:	400a      	ands	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe ff59 	bl	8000fe4 <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002138:	f7fe ff54 	bl	8000fe4 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e19a      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800214a:	4bb2      	ldr	r3, [pc, #712]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2208      	movs	r2, #8
 800215c:	4013      	ands	r3, r2
 800215e:	d036      	beq.n	80021ce <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d019      	beq.n	800219c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002168:	4baa      	ldr	r3, [pc, #680]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800216a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800216c:	4ba9      	ldr	r3, [pc, #676]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800216e:	2101      	movs	r1, #1
 8002170:	430a      	orrs	r2, r1
 8002172:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe ff36 	bl	8000fe4 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217e:	f7fe ff31 	bl	8000fe4 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e177      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002190:	4ba0      	ldr	r3, [pc, #640]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d0f1      	beq.n	800217e <HAL_RCC_OscConfig+0x3ea>
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b9d      	ldr	r3, [pc, #628]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800219e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a0:	4b9c      	ldr	r3, [pc, #624]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	438a      	bics	r2, r1
 80021a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7fe ff1c 	bl	8000fe4 <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b2:	f7fe ff17 	bl	8000fe4 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e15d      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021c4:	4b93      	ldr	r3, [pc, #588]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c8:	2202      	movs	r2, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	d1f1      	bne.n	80021b2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2204      	movs	r2, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	d100      	bne.n	80021da <HAL_RCC_OscConfig+0x446>
 80021d8:	e0ae      	b.n	8002338 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2023      	movs	r0, #35	; 0x23
 80021dc:	183b      	adds	r3, r7, r0
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b8c      	ldr	r3, [pc, #560]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80021e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	055b      	lsls	r3, r3, #21
 80021ea:	4013      	ands	r3, r2
 80021ec:	d109      	bne.n	8002202 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b89      	ldr	r3, [pc, #548]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80021f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	0549      	lsls	r1, r1, #21
 80021f8:	430a      	orrs	r2, r1
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80021fc:	183b      	adds	r3, r7, r0
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b87      	ldr	r3, [pc, #540]	; (8002420 <HAL_RCC_OscConfig+0x68c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4013      	ands	r3, r2
 800220c:	d11a      	bne.n	8002244 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220e:	4b84      	ldr	r3, [pc, #528]	; (8002420 <HAL_RCC_OscConfig+0x68c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b83      	ldr	r3, [pc, #524]	; (8002420 <HAL_RCC_OscConfig+0x68c>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0049      	lsls	r1, r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221c:	f7fe fee2 	bl	8000fe4 <HAL_GetTick>
 8002220:	0003      	movs	r3, r0
 8002222:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe fedd 	bl	8000fe4 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e123      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b79      	ldr	r3, [pc, #484]	; (8002420 <HAL_RCC_OscConfig+0x68c>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x4cc>
 8002250:	4b70      	ldr	r3, [pc, #448]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002254:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	0049      	lsls	r1, r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
 800225e:	e031      	b.n	80022c4 <HAL_RCC_OscConfig+0x530>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x4ee>
 8002268:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800226a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800226c:	4b69      	ldr	r3, [pc, #420]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800226e:	496b      	ldr	r1, [pc, #428]	; (800241c <HAL_RCC_OscConfig+0x688>)
 8002270:	400a      	ands	r2, r1
 8002272:	651a      	str	r2, [r3, #80]	; 0x50
 8002274:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002278:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800227a:	496a      	ldr	r1, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x690>)
 800227c:	400a      	ands	r2, r1
 800227e:	651a      	str	r2, [r3, #80]	; 0x50
 8002280:	e020      	b.n	80022c4 <HAL_RCC_OscConfig+0x530>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	23a0      	movs	r3, #160	; 0xa0
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	429a      	cmp	r2, r3
 800228c:	d10e      	bne.n	80022ac <HAL_RCC_OscConfig+0x518>
 800228e:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002292:	4b60      	ldr	r3, [pc, #384]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	00c9      	lsls	r1, r1, #3
 8002298:	430a      	orrs	r2, r1
 800229a:	651a      	str	r2, [r3, #80]	; 0x50
 800229c:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800229e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0049      	lsls	r1, r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	651a      	str	r2, [r3, #80]	; 0x50
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0x530>
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80022ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80022b2:	495a      	ldr	r1, [pc, #360]	; (800241c <HAL_RCC_OscConfig+0x688>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	651a      	str	r2, [r3, #80]	; 0x50
 80022b8:	4b56      	ldr	r3, [pc, #344]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80022ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022bc:	4b55      	ldr	r3, [pc, #340]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80022be:	4959      	ldr	r1, [pc, #356]	; (8002424 <HAL_RCC_OscConfig+0x690>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fe8a 	bl	8000fe4 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d4:	e009      	b.n	80022ea <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fe85 	bl	8000fe4 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	4a51      	ldr	r2, [pc, #324]	; (8002428 <HAL_RCC_OscConfig+0x694>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0ca      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80022ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d0ef      	beq.n	80022d6 <HAL_RCC_OscConfig+0x542>
 80022f6:	e014      	b.n	8002322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7fe fe74 	bl	8000fe4 <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002300:	e009      	b.n	8002316 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe fe6f 	bl	8000fe4 <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	4a46      	ldr	r2, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x694>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0b4      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d1ef      	bne.n	8002302 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002322:	2323      	movs	r3, #35	; 0x23
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800232e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002330:	4b38      	ldr	r3, [pc, #224]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002332:	493e      	ldr	r1, [pc, #248]	; (800242c <HAL_RCC_OscConfig+0x698>)
 8002334:	400a      	ands	r2, r1
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b00      	cmp	r3, #0
 800233e:	d100      	bne.n	8002342 <HAL_RCC_OscConfig+0x5ae>
 8002340:	e09d      	b.n	800247e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d100      	bne.n	800234a <HAL_RCC_OscConfig+0x5b6>
 8002348:	e076      	b.n	8002438 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	2b02      	cmp	r3, #2
 8002350:	d145      	bne.n	80023de <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002358:	4935      	ldr	r1, [pc, #212]	; (8002430 <HAL_RCC_OscConfig+0x69c>)
 800235a:	400a      	ands	r2, r1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fe41 	bl	8000fe4 <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fe3c 	bl	8000fe4 <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e082      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	049b      	lsls	r3, r3, #18
 8002382:	4013      	ands	r3, r2
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a2a      	ldr	r2, [pc, #168]	; (8002434 <HAL_RCC_OscConfig+0x6a0>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	431a      	orrs	r2, r3
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0449      	lsls	r1, r1, #17
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe16 	bl	8000fe4 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023be:	f7fe fe11 	bl	8000fe4 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e057      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	049b      	lsls	r3, r3, #18
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x62a>
 80023dc:	e04f      	b.n	800247e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 80023e4:	4912      	ldr	r1, [pc, #72]	; (8002430 <HAL_RCC_OscConfig+0x69c>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fdfb 	bl	8000fe4 <HAL_GetTick>
 80023ee:	0003      	movs	r3, r0
 80023f0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fdf6 	bl	8000fe4 <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e03c      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002406:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCC_OscConfig+0x680>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	049b      	lsls	r3, r3, #18
 800240e:	4013      	ands	r3, r2
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x660>
 8002412:	e034      	b.n	800247e <HAL_RCC_OscConfig+0x6ea>
 8002414:	40021000 	.word	0x40021000
 8002418:	ffff1fff 	.word	0xffff1fff
 800241c:	fffffeff 	.word	0xfffffeff
 8002420:	40007000 	.word	0x40007000
 8002424:	fffffbff 	.word	0xfffffbff
 8002428:	00001388 	.word	0x00001388
 800242c:	efffffff 	.word	0xefffffff
 8002430:	feffffff 	.word	0xfeffffff
 8002434:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCC_OscConfig+0x6f4>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	025b      	lsls	r3, r3, #9
 8002450:	401a      	ands	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	429a      	cmp	r2, r3
 8002458:	d10f      	bne.n	800247a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	23f0      	movs	r3, #240	; 0xf0
 800245e:	039b      	lsls	r3, r3, #14
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d107      	bne.n	800247a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	23c0      	movs	r3, #192	; 0xc0
 800246e:	041b      	lsls	r3, r3, #16
 8002470:	401a      	ands	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b00a      	add	sp, #40	; 0x28
 8002486:	bdb0      	pop	{r4, r5, r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b5b0      	push	{r4, r5, r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e128      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d91e      	bls.n	80024ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	4393      	bics	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	4b90      	ldr	r3, [pc, #576]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fd90 	bl	8000fe4 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c8:	e009      	b.n	80024de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ca:	f7fe fd8b 	bl	8000fe4 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	4a8a      	ldr	r2, [pc, #552]	; (8002700 <HAL_RCC_ClockConfig+0x274>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e109      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b87      	ldr	r3, [pc, #540]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f6:	4b83      	ldr	r3, [pc, #524]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	22f0      	movs	r2, #240	; 0xf0
 80024fc:	4393      	bics	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	4b7f      	ldr	r3, [pc, #508]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d100      	bne.n	8002516 <HAL_RCC_ClockConfig+0x8a>
 8002514:	e089      	b.n	800262a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800251e:	4b79      	ldr	r3, [pc, #484]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	4013      	ands	r3, r2
 8002528:	d120      	bne.n	800256c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0e1      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	049b      	lsls	r3, r3, #18
 800253e:	4013      	ands	r3, r2
 8002540:	d114      	bne.n	800256c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0d5      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d106      	bne.n	800255c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d109      	bne.n	800256c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0ca      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800255c:	4b69      	ldr	r3, [pc, #420]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0c2      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256c:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2203      	movs	r2, #3
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4b62      	ldr	r3, [pc, #392]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe fd30 	bl	8000fe4 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d111      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002590:	e009      	b.n	80025a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002592:	f7fe fd27 	bl	8000fe4 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_RCC_ClockConfig+0x274>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0a5      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a6:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	220c      	movs	r2, #12
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d1ef      	bne.n	8002592 <HAL_RCC_ClockConfig+0x106>
 80025b2:	e03a      	b.n	800262a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d111      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	e009      	b.n	80025d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025be:	f7fe fd11 	bl	8000fe4 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	4a4d      	ldr	r2, [pc, #308]	; (8002700 <HAL_RCC_ClockConfig+0x274>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e08f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	220c      	movs	r2, #12
 80025d8:	4013      	ands	r3, r2
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d1ef      	bne.n	80025be <HAL_RCC_ClockConfig+0x132>
 80025de:	e024      	b.n	800262a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d11b      	bne.n	8002620 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e8:	e009      	b.n	80025fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f7fe fcfb 	bl	8000fe4 <HAL_GetTick>
 80025ee:	0002      	movs	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	4a42      	ldr	r2, [pc, #264]	; (8002700 <HAL_RCC_ClockConfig+0x274>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e079      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	220c      	movs	r2, #12
 8002604:	4013      	ands	r3, r2
 8002606:	2b04      	cmp	r3, #4
 8002608:	d1ef      	bne.n	80025ea <HAL_RCC_ClockConfig+0x15e>
 800260a:	e00e      	b.n	800262a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fcea 	bl	8000fe4 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <HAL_RCC_ClockConfig+0x274>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e068      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d21e      	bcs.n	8002676 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4393      	bics	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800264a:	f7fe fccb 	bl	8000fe4 <HAL_GetTick>
 800264e:	0003      	movs	r3, r0
 8002650:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	e009      	b.n	8002668 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe fcc6 	bl	8000fe4 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_RCC_ClockConfig+0x274>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e044      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_ClockConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2201      	movs	r2, #1
 800266e:	4013      	ands	r3, r2
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d1ee      	bne.n	8002654 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2204      	movs	r2, #4
 800267c:	4013      	ands	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a20      	ldr	r2, [pc, #128]	; (8002708 <HAL_RCC_ClockConfig+0x27c>)
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	4013      	ands	r3, r2
 800269c:	d00a      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_RCC_ClockConfig+0x280>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	00da      	lsls	r2, r3, #3
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b4:	f000 f832 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026b8:	0001      	movs	r1, r0
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCC_ClockConfig+0x278>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	220f      	movs	r2, #15
 80026c2:	4013      	ands	r3, r2
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_RCC_ClockConfig+0x284>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	000a      	movs	r2, r1
 80026ca:	40da      	lsrs	r2, r3
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_ClockConfig+0x288>)
 80026ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_RCC_ClockConfig+0x28c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	250b      	movs	r5, #11
 80026d6:	197c      	adds	r4, r7, r5
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fe fc3d 	bl	8000f58 <HAL_InitTick>
 80026de:	0003      	movs	r3, r0
 80026e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80026e2:	197b      	adds	r3, r7, r5
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80026ea:	197b      	adds	r3, r7, r5
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bdb0      	pop	{r4, r5, r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	40022000 	.word	0x40022000
 8002700:	00001388 	.word	0x00001388
 8002704:	40021000 	.word	0x40021000
 8002708:	fffff8ff 	.word	0xfffff8ff
 800270c:	ffffc7ff 	.word	0xffffc7ff
 8002710:	08003614 	.word	0x08003614
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b08e      	sub	sp, #56	; 0x38
 8002720:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002722:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <HAL_RCC_GetSysClockFreq+0x138>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272a:	230c      	movs	r3, #12
 800272c:	4013      	ands	r3, r2
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d014      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x40>
 8002732:	d900      	bls.n	8002736 <HAL_RCC_GetSysClockFreq+0x1a>
 8002734:	e07b      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x112>
 8002736:	2b04      	cmp	r3, #4
 8002738:	d002      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x24>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d00b      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x3a>
 800273e:	e076      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002740:	4b44      	ldr	r3, [pc, #272]	; (8002854 <HAL_RCC_GetSysClockFreq+0x138>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	4013      	ands	r3, r2
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800274a:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCC_GetSysClockFreq+0x13c>)
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800274e:	e07c      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002750:	4b42      	ldr	r3, [pc, #264]	; (800285c <HAL_RCC_GetSysClockFreq+0x140>)
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002754:	e079      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002756:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCC_GetSysClockFreq+0x144>)
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800275a:	e076      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	0c9a      	lsrs	r2, r3, #18
 8002760:	230f      	movs	r3, #15
 8002762:	401a      	ands	r2, r3
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_GetSysClockFreq+0x148>)
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	0d9a      	lsrs	r2, r3, #22
 800276e:	2303      	movs	r3, #3
 8002770:	4013      	ands	r3, r2
 8002772:	3301      	adds	r3, #1
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_RCC_GetSysClockFreq+0x138>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	4013      	ands	r3, r2
 8002780:	d01a      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	4a35      	ldr	r2, [pc, #212]	; (8002860 <HAL_RCC_GetSysClockFreq+0x144>)
 800278c:	2300      	movs	r3, #0
 800278e:	69b8      	ldr	r0, [r7, #24]
 8002790:	69f9      	ldr	r1, [r7, #28]
 8002792:	f7fd fd6d 	bl	8000270 <__aeabi_lmul>
 8002796:	0002      	movs	r2, r0
 8002798:	000b      	movs	r3, r1
 800279a:	0010      	movs	r0, r2
 800279c:	0019      	movs	r1, r3
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f7fd fd41 	bl	8000230 <__aeabi_uldivmod>
 80027ae:	0002      	movs	r2, r0
 80027b0:	000b      	movs	r3, r1
 80027b2:	0013      	movs	r3, r2
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
 80027b6:	e037      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027b8:	4b26      	ldr	r3, [pc, #152]	; (8002854 <HAL_RCC_GetSysClockFreq+0x138>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	4013      	ands	r3, r2
 80027c0:	d01a      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_RCC_GetSysClockFreq+0x13c>)
 80027cc:	2300      	movs	r3, #0
 80027ce:	68b8      	ldr	r0, [r7, #8]
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	f7fd fd4d 	bl	8000270 <__aeabi_lmul>
 80027d6:	0002      	movs	r2, r0
 80027d8:	000b      	movs	r3, r1
 80027da:	0010      	movs	r0, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f7fd fd21 	bl	8000230 <__aeabi_uldivmod>
 80027ee:	0002      	movs	r2, r0
 80027f0:	000b      	movs	r3, r1
 80027f2:	0013      	movs	r3, r2
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
 80027f6:	e017      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	0018      	movs	r0, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	0019      	movs	r1, r3
 8002800:	4a16      	ldr	r2, [pc, #88]	; (800285c <HAL_RCC_GetSysClockFreq+0x140>)
 8002802:	2300      	movs	r3, #0
 8002804:	f7fd fd34 	bl	8000270 <__aeabi_lmul>
 8002808:	0002      	movs	r2, r0
 800280a:	000b      	movs	r3, r1
 800280c:	0010      	movs	r0, r2
 800280e:	0019      	movs	r1, r3
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	001c      	movs	r4, r3
 8002814:	2300      	movs	r3, #0
 8002816:	001d      	movs	r5, r3
 8002818:	0022      	movs	r2, r4
 800281a:	002b      	movs	r3, r5
 800281c:	f7fd fd08 	bl	8000230 <__aeabi_uldivmod>
 8002820:	0002      	movs	r2, r0
 8002822:	000b      	movs	r3, r1
 8002824:	0013      	movs	r3, r2
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800282c:	e00d      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_GetSysClockFreq+0x138>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	2207      	movs	r2, #7
 8002836:	4013      	ands	r3, r2
 8002838:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	3301      	adds	r3, #1
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0212      	lsls	r2, r2, #8
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002848:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b00e      	add	sp, #56	; 0x38
 8002852:	bdb0      	pop	{r4, r5, r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	003d0900 	.word	0x003d0900
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200
 8002864:	0800362c 	.word	0x0800362c

08002868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b02      	ldr	r3, [pc, #8]	; (8002878 <HAL_RCC_GetHCLKFreq+0x10>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002880:	f7ff fff2 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002884:	0001      	movs	r1, r0
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	2207      	movs	r2, #7
 800288e:	4013      	ands	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	40d9      	lsrs	r1, r3
 8002896:	000b      	movs	r3, r1
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08003624 	.word	0x08003624

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ac:	f7ff ffdc 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028b0:	0001      	movs	r1, r0
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	0adb      	lsrs	r3, r3, #11
 80028b8:	2207      	movs	r2, #7
 80028ba:	4013      	ands	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	40d9      	lsrs	r1, r3
 80028c2:	000b      	movs	r3, r1
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08003624 	.word	0x08003624

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80028dc:	2017      	movs	r0, #23
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2220      	movs	r2, #32
 80028ea:	4013      	ands	r3, r2
 80028ec:	d100      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80028ee:	e0c2      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f0:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	055b      	lsls	r3, r3, #21
 80028f8:	4013      	ands	r3, r2
 80028fa:	d109      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	4b7e      	ldr	r3, [pc, #504]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002900:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	0549      	lsls	r1, r1, #21
 8002906:	430a      	orrs	r2, r1
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800290a:	183b      	adds	r3, r7, r0
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4013      	ands	r3, r2
 800291a:	d11a      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291c:	4b77      	ldr	r3, [pc, #476]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	0049      	lsls	r1, r1, #1
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe fb5b 	bl	8000fe4 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	e008      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe fb56 	bl	8000fe4 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0d4      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b6d      	ldr	r3, [pc, #436]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d0f0      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002952:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	23c0      	movs	r3, #192	; 0xc0
 8002958:	039b      	lsls	r3, r3, #14
 800295a:	4013      	ands	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	23c0      	movs	r3, #192	; 0xc0
 8002964:	039b      	lsls	r3, r3, #14
 8002966:	4013      	ands	r3, r2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	429a      	cmp	r2, r3
 800296c:	d013      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	23c0      	movs	r3, #192	; 0xc0
 8002974:	029b      	lsls	r3, r3, #10
 8002976:	401a      	ands	r2, r3
 8002978:	23c0      	movs	r3, #192	; 0xc0
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	429a      	cmp	r2, r3
 800297e:	d10a      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002980:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	401a      	ands	r2, r3
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	029b      	lsls	r3, r3, #10
 800298e:	429a      	cmp	r2, r3
 8002990:	d101      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0ac      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002996:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800299a:	23c0      	movs	r3, #192	; 0xc0
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	4013      	ands	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d03b      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	23c0      	movs	r3, #192	; 0xc0
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	4013      	ands	r3, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d033      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2220      	movs	r2, #32
 80029be:	4013      	ands	r3, r2
 80029c0:	d02e      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c6:	4a4e      	ldr	r2, [pc, #312]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029d0:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	0309      	lsls	r1, r1, #12
 80029d6:	430a      	orrs	r2, r1
 80029d8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029de:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029e0:	4948      	ldr	r1, [pc, #288]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029e2:	400a      	ands	r2, r1
 80029e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d014      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe faf5 	bl	8000fe4 <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029fe:	e009      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe faf0 	bl	8000fe4 <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	4a3f      	ldr	r2, [pc, #252]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e06d      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a14:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	23c0      	movs	r3, #192	; 0xc0
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	401a      	ands	r2, r3
 8002a2a:	23c0      	movs	r3, #192	; 0xc0
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a35      	ldr	r2, [pc, #212]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	23c0      	movs	r3, #192	; 0xc0
 8002a42:	039b      	lsls	r3, r3, #14
 8002a44:	401a      	ands	r2, r3
 8002a46:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a4e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	23c0      	movs	r3, #192	; 0xc0
 8002a56:	029b      	lsls	r3, r3, #10
 8002a58:	401a      	ands	r2, r3
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a60:	2317      	movs	r3, #23
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a70:	4927      	ldr	r1, [pc, #156]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	220c      	movs	r2, #12
 8002a86:	4393      	bics	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002acc:	430a      	orrs	r2, r1
 8002ace:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b006      	add	sp, #24
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	fffcffff 	.word	0xfffcffff
 8002b04:	fff7ffff 	.word	0xfff7ffff
 8002b08:	00001388 	.word	0x00001388
 8002b0c:	ffcfffff 	.word	0xffcfffff
 8002b10:	efffffff 	.word	0xefffffff
 8002b14:	fffff3ff 	.word	0xfffff3ff
 8002b18:	ffffcfff 	.word	0xffffcfff
 8002b1c:	fff3ffff 	.word	0xfff3ffff

08002b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e044      	b.n	8002bbc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2274      	movs	r2, #116	; 0x74
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fe f979 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2224      	movs	r2, #36	; 0x24
 8002b4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f8d8 	bl	8002d18 <UART_SetConfig>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e024      	b.n	8002bbc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 fb15 	bl	80031ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	490d      	ldr	r1, [pc, #52]	; (8002bc4 <HAL_UART_Init+0xa4>)
 8002b8e:	400a      	ands	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	212a      	movs	r1, #42	; 0x2a
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f000 fbad 	bl	8003314 <UART_CheckIdleState>
 8002bba:	0003      	movs	r3, r0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	ffffb7ff 	.word	0xffffb7ff

08002bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d000      	beq.n	8002be2 <HAL_UART_Transmit+0x1a>
 8002be0:	e095      	b.n	8002d0e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_UART_Transmit+0x28>
 8002be8:	1dbb      	adds	r3, r7, #6
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e08d      	b.n	8002d10 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d109      	bne.n	8002c14 <HAL_UART_Transmit+0x4c>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e07d      	b.n	8002d10 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2274      	movs	r2, #116	; 0x74
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Transmit+0x5a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e076      	b.n	8002d10 <HAL_UART_Transmit+0x148>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2274      	movs	r2, #116	; 0x74
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	2100      	movs	r1, #0
 8002c30:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c38:	f7fe f9d4 	bl	8000fe4 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1dba      	adds	r2, r7, #6
 8002c44:	2150      	movs	r1, #80	; 0x50
 8002c46:	8812      	ldrh	r2, [r2, #0]
 8002c48:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1dba      	adds	r2, r7, #6
 8002c4e:	2152      	movs	r1, #82	; 0x52
 8002c50:	8812      	ldrh	r2, [r2, #0]
 8002c52:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	015b      	lsls	r3, r3, #5
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d108      	bne.n	8002c72 <HAL_UART_Transmit+0xaa>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d104      	bne.n	8002c72 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e003      	b.n	8002c7a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2274      	movs	r2, #116	; 0x74
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c82:	e02c      	b.n	8002cde <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	f000 fb87 	bl	80033a4 <UART_WaitOnFlagUntilTimeout>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e038      	b.n	8002d10 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	001a      	movs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	05d2      	lsls	r2, r2, #23
 8002cb0:	0dd2      	lsrs	r2, r2, #23
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e007      	b.n	8002ccc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2252      	movs	r2, #82	; 0x52
 8002cd0:	5a9b      	ldrh	r3, [r3, r2]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b299      	uxth	r1, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2252      	movs	r2, #82	; 0x52
 8002cdc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2252      	movs	r2, #82	; 0x52
 8002ce2:	5a9b      	ldrh	r3, [r3, r2]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1cc      	bne.n	8002c84 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2140      	movs	r1, #64	; 0x40
 8002cf8:	f000 fb54 	bl	80033a4 <UART_WaitOnFlagUntilTimeout>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e005      	b.n	8002d10 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b008      	add	sp, #32
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d20:	231a      	movs	r3, #26
 8002d22:	2218      	movs	r2, #24
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4ab4      	ldr	r2, [pc, #720]	; (800301c <UART_SetConfig+0x304>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4aaf      	ldr	r2, [pc, #700]	; (8003020 <UART_SetConfig+0x308>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4aa9      	ldr	r2, [pc, #676]	; (8003024 <UART_SetConfig+0x30c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4aa5      	ldr	r2, [pc, #660]	; (8003028 <UART_SetConfig+0x310>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4aa1      	ldr	r2, [pc, #644]	; (800302c <UART_SetConfig+0x314>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d131      	bne.n	8002e10 <UART_SetConfig+0xf8>
 8002dac:	4ba0      	ldr	r3, [pc, #640]	; (8003030 <UART_SetConfig+0x318>)
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	220c      	movs	r2, #12
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d01d      	beq.n	8002df4 <UART_SetConfig+0xdc>
 8002db8:	d823      	bhi.n	8002e02 <UART_SetConfig+0xea>
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d00c      	beq.n	8002dd8 <UART_SetConfig+0xc0>
 8002dbe:	d820      	bhi.n	8002e02 <UART_SetConfig+0xea>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <UART_SetConfig+0xb2>
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d00e      	beq.n	8002de6 <UART_SetConfig+0xce>
 8002dc8:	e01b      	b.n	8002e02 <UART_SetConfig+0xea>
 8002dca:	231b      	movs	r3, #27
 8002dcc:	2218      	movs	r2, #24
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	19db      	adds	r3, r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e065      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002dd8:	231b      	movs	r3, #27
 8002dda:	2218      	movs	r2, #24
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	19db      	adds	r3, r3, r7
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e05e      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002de6:	231b      	movs	r3, #27
 8002de8:	2218      	movs	r2, #24
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	19db      	adds	r3, r3, r7
 8002dee:	2204      	movs	r2, #4
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e057      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002df4:	231b      	movs	r3, #27
 8002df6:	2218      	movs	r2, #24
 8002df8:	189b      	adds	r3, r3, r2
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e050      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002e02:	231b      	movs	r3, #27
 8002e04:	2218      	movs	r2, #24
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e049      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a83      	ldr	r2, [pc, #524]	; (8003024 <UART_SetConfig+0x30c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d13e      	bne.n	8002e98 <UART_SetConfig+0x180>
 8002e1a:	4b85      	ldr	r3, [pc, #532]	; (8003030 <UART_SetConfig+0x318>)
 8002e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1e:	23c0      	movs	r3, #192	; 0xc0
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4013      	ands	r3, r2
 8002e24:	22c0      	movs	r2, #192	; 0xc0
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d027      	beq.n	8002e7c <UART_SetConfig+0x164>
 8002e2c:	22c0      	movs	r2, #192	; 0xc0
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d82a      	bhi.n	8002e8a <UART_SetConfig+0x172>
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d011      	beq.n	8002e60 <UART_SetConfig+0x148>
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d822      	bhi.n	8002e8a <UART_SetConfig+0x172>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <UART_SetConfig+0x13a>
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	00d2      	lsls	r2, r2, #3
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <UART_SetConfig+0x156>
 8002e50:	e01b      	b.n	8002e8a <UART_SetConfig+0x172>
 8002e52:	231b      	movs	r3, #27
 8002e54:	2218      	movs	r2, #24
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	19db      	adds	r3, r3, r7
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e021      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002e60:	231b      	movs	r3, #27
 8002e62:	2218      	movs	r2, #24
 8002e64:	189b      	adds	r3, r3, r2
 8002e66:	19db      	adds	r3, r3, r7
 8002e68:	2202      	movs	r2, #2
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e01a      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002e6e:	231b      	movs	r3, #27
 8002e70:	2218      	movs	r2, #24
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	19db      	adds	r3, r3, r7
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e013      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002e7c:	231b      	movs	r3, #27
 8002e7e:	2218      	movs	r2, #24
 8002e80:	189b      	adds	r3, r3, r2
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	2208      	movs	r2, #8
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e00c      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002e8a:	231b      	movs	r3, #27
 8002e8c:	2218      	movs	r2, #24
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	19db      	adds	r3, r3, r7
 8002e92:	2210      	movs	r2, #16
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e005      	b.n	8002ea4 <UART_SetConfig+0x18c>
 8002e98:	231b      	movs	r3, #27
 8002e9a:	2218      	movs	r2, #24
 8002e9c:	189b      	adds	r3, r3, r2
 8002e9e:	19db      	adds	r3, r3, r7
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5e      	ldr	r2, [pc, #376]	; (8003024 <UART_SetConfig+0x30c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d000      	beq.n	8002eb0 <UART_SetConfig+0x198>
 8002eae:	e084      	b.n	8002fba <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eb0:	231b      	movs	r3, #27
 8002eb2:	2218      	movs	r2, #24
 8002eb4:	189b      	adds	r3, r3, r2
 8002eb6:	19db      	adds	r3, r3, r7
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d01d      	beq.n	8002efa <UART_SetConfig+0x1e2>
 8002ebe:	dc20      	bgt.n	8002f02 <UART_SetConfig+0x1ea>
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d015      	beq.n	8002ef0 <UART_SetConfig+0x1d8>
 8002ec4:	dc1d      	bgt.n	8002f02 <UART_SetConfig+0x1ea>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <UART_SetConfig+0x1b8>
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d005      	beq.n	8002eda <UART_SetConfig+0x1c2>
 8002ece:	e018      	b.n	8002f02 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f7ff fcd4 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ed8:	e01c      	b.n	8002f14 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eda:	4b55      	ldr	r3, [pc, #340]	; (8003030 <UART_SetConfig+0x318>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2210      	movs	r2, #16
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d002      	beq.n	8002eea <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ee4:	4b53      	ldr	r3, [pc, #332]	; (8003034 <UART_SetConfig+0x31c>)
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ee8:	e014      	b.n	8002f14 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002eea:	4b53      	ldr	r3, [pc, #332]	; (8003038 <UART_SetConfig+0x320>)
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eee:	e011      	b.n	8002f14 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef0:	f7ff fc14 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ef8:	e00c      	b.n	8002f14 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f00:	e008      	b.n	8002f14 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f06:	231a      	movs	r3, #26
 8002f08:	2218      	movs	r2, #24
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	19db      	adds	r3, r3, r7
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
        break;
 8002f12:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d100      	bne.n	8002f1c <UART_SetConfig+0x204>
 8002f1a:	e130      	b.n	800317e <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	0013      	movs	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d305      	bcc.n	8002f38 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d906      	bls.n	8002f46 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002f38:	231a      	movs	r3, #26
 8002f3a:	2218      	movs	r2, #24
 8002f3c:	189b      	adds	r3, r3, r2
 8002f3e:	19db      	adds	r3, r3, r7
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e11b      	b.n	800317e <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	6939      	ldr	r1, [r7, #16]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	000b      	movs	r3, r1
 8002f54:	0e1b      	lsrs	r3, r3, #24
 8002f56:	0010      	movs	r0, r2
 8002f58:	0205      	lsls	r5, r0, #8
 8002f5a:	431d      	orrs	r5, r3
 8002f5c:	000b      	movs	r3, r1
 8002f5e:	021c      	lsls	r4, r3, #8
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68b8      	ldr	r0, [r7, #8]
 8002f6e:	68f9      	ldr	r1, [r7, #12]
 8002f70:	1900      	adds	r0, r0, r4
 8002f72:	4169      	adcs	r1, r5
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f7fd f955 	bl	8000230 <__aeabi_uldivmod>
 8002f86:	0002      	movs	r2, r0
 8002f88:	000b      	movs	r3, r1
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f90:	23c0      	movs	r3, #192	; 0xc0
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d309      	bcc.n	8002fac <UART_SetConfig+0x294>
 8002f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	035b      	lsls	r3, r3, #13
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d204      	bcs.n	8002fac <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	e0e8      	b.n	800317e <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002fac:	231a      	movs	r3, #26
 8002fae:	2218      	movs	r2, #24
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	19db      	adds	r3, r3, r7
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e0e1      	b.n	800317e <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d000      	beq.n	8002fc8 <UART_SetConfig+0x2b0>
 8002fc6:	e083      	b.n	80030d0 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002fc8:	231b      	movs	r3, #27
 8002fca:	2218      	movs	r2, #24
 8002fcc:	189b      	adds	r3, r3, r2
 8002fce:	19db      	adds	r3, r3, r7
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d834      	bhi.n	8003040 <UART_SetConfig+0x328>
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <UART_SetConfig+0x324>)
 8002fda:	18d3      	adds	r3, r2, r3
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe0:	f7ff fc4c 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fe8:	e033      	b.n	8003052 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fea:	f7ff fc5d 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff2:	e02e      	b.n	8003052 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <UART_SetConfig+0x318>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d002      	beq.n	8003004 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <UART_SetConfig+0x31c>)
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003002:	e026      	b.n	8003052 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <UART_SetConfig+0x320>)
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003008:	e023      	b.n	8003052 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300a:	f7ff fb87 	bl	800271c <HAL_RCC_GetSysClockFreq>
 800300e:	0003      	movs	r3, r0
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003012:	e01e      	b.n	8003052 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800301a:	e01a      	b.n	8003052 <UART_SetConfig+0x33a>
 800301c:	efff69f3 	.word	0xefff69f3
 8003020:	ffffcfff 	.word	0xffffcfff
 8003024:	40004800 	.word	0x40004800
 8003028:	fffff4ff 	.word	0xfffff4ff
 800302c:	40004400 	.word	0x40004400
 8003030:	40021000 	.word	0x40021000
 8003034:	003d0900 	.word	0x003d0900
 8003038:	00f42400 	.word	0x00f42400
 800303c:	08003638 	.word	0x08003638
      default:
        pclk = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003044:	231a      	movs	r3, #26
 8003046:	2218      	movs	r2, #24
 8003048:	189b      	adds	r3, r3, r2
 800304a:	19db      	adds	r3, r3, r7
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
        break;
 8003050:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d100      	bne.n	800305a <UART_SetConfig+0x342>
 8003058:	e091      	b.n	800317e <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	005a      	lsls	r2, r3, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	18d2      	adds	r2, r2, r3
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f7fd f853 	bl	8000118 <__udivsi3>
 8003072:	0003      	movs	r3, r0
 8003074:	b29b      	uxth	r3, r3
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d921      	bls.n	80030c2 <UART_SetConfig+0x3aa>
 800307e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	429a      	cmp	r2, r3
 8003086:	d21c      	bcs.n	80030c2 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	b29a      	uxth	r2, r3
 800308c:	200e      	movs	r0, #14
 800308e:	2418      	movs	r4, #24
 8003090:	1903      	adds	r3, r0, r4
 8003092:	19db      	adds	r3, r3, r7
 8003094:	210f      	movs	r1, #15
 8003096:	438a      	bics	r2, r1
 8003098:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2207      	movs	r2, #7
 80030a2:	4013      	ands	r3, r2
 80030a4:	b299      	uxth	r1, r3
 80030a6:	1903      	adds	r3, r0, r4
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	1902      	adds	r2, r0, r4
 80030ac:	19d2      	adds	r2, r2, r7
 80030ae:	8812      	ldrh	r2, [r2, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1902      	adds	r2, r0, r4
 80030ba:	19d2      	adds	r2, r2, r7
 80030bc:	8812      	ldrh	r2, [r2, #0]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	e05d      	b.n	800317e <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 80030c2:	231a      	movs	r3, #26
 80030c4:	2218      	movs	r2, #24
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	19db      	adds	r3, r3, r7
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e056      	b.n	800317e <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030d0:	231b      	movs	r3, #27
 80030d2:	2218      	movs	r2, #24
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	19db      	adds	r3, r3, r7
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d822      	bhi.n	8003124 <UART_SetConfig+0x40c>
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <UART_SetConfig+0x484>)
 80030e2:	18d3      	adds	r3, r2, r3
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7ff fbc8 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 80030ec:	0003      	movs	r3, r0
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030f0:	e021      	b.n	8003136 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f2:	f7ff fbd9 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 80030f6:	0003      	movs	r3, r0
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030fa:	e01c      	b.n	8003136 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <UART_SetConfig+0x488>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2210      	movs	r2, #16
 8003102:	4013      	ands	r3, r2
 8003104:	d002      	beq.n	800310c <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <UART_SetConfig+0x48c>)
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800310a:	e014      	b.n	8003136 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 800310c:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <UART_SetConfig+0x490>)
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003110:	e011      	b.n	8003136 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003112:	f7ff fb03 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003116:	0003      	movs	r3, r0
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800311a:	e00c      	b.n	8003136 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003122:	e008      	b.n	8003136 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003128:	231a      	movs	r3, #26
 800312a:	2218      	movs	r2, #24
 800312c:	189b      	adds	r3, r3, r2
 800312e:	19db      	adds	r3, r3, r7
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
        break;
 8003134:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	085a      	lsrs	r2, r3, #1
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	18d2      	adds	r2, r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f7fc ffe3 	bl	8000118 <__udivsi3>
 8003152:	0003      	movs	r3, r0
 8003154:	b29b      	uxth	r3, r3
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2b0f      	cmp	r3, #15
 800315c:	d909      	bls.n	8003172 <UART_SetConfig+0x45a>
 800315e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	025b      	lsls	r3, r3, #9
 8003164:	429a      	cmp	r2, r3
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e005      	b.n	800317e <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8003172:	231a      	movs	r3, #26
 8003174:	2218      	movs	r2, #24
 8003176:	189b      	adds	r3, r3, r2
 8003178:	19db      	adds	r3, r3, r7
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2200      	movs	r2, #0
 8003182:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2200      	movs	r2, #0
 8003188:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800318a:	231a      	movs	r3, #26
 800318c:	2218      	movs	r2, #24
 800318e:	189b      	adds	r3, r3, r2
 8003190:	19db      	adds	r3, r3, r7
 8003192:	781b      	ldrb	r3, [r3, #0]
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b00e      	add	sp, #56	; 0x38
 800319a:	bdb0      	pop	{r4, r5, r7, pc}
 800319c:	0800365c 	.word	0x0800365c
 80031a0:	40021000 	.word	0x40021000
 80031a4:	003d0900 	.word	0x003d0900
 80031a8:	00f42400 	.word	0x00f42400

080031ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	2201      	movs	r2, #1
 80031ba:	4013      	ands	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a4a      	ldr	r2, [pc, #296]	; (80032f0 <UART_AdvFeatureConfig+0x144>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d00b      	beq.n	80031f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4a43      	ldr	r2, [pc, #268]	; (80032f4 <UART_AdvFeatureConfig+0x148>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	2204      	movs	r2, #4
 80031fe:	4013      	ands	r3, r2
 8003200:	d00b      	beq.n	800321a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <UART_AdvFeatureConfig+0x14c>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	2208      	movs	r2, #8
 8003220:	4013      	ands	r3, r2
 8003222:	d00b      	beq.n	800323c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a34      	ldr	r2, [pc, #208]	; (80032fc <UART_AdvFeatureConfig+0x150>)
 800322c:	4013      	ands	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2210      	movs	r2, #16
 8003242:	4013      	ands	r3, r2
 8003244:	d00b      	beq.n	800325e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a2c      	ldr	r2, [pc, #176]	; (8003300 <UART_AdvFeatureConfig+0x154>)
 800324e:	4013      	ands	r3, r2
 8003250:	0019      	movs	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2220      	movs	r2, #32
 8003264:	4013      	ands	r3, r2
 8003266:	d00b      	beq.n	8003280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4a25      	ldr	r2, [pc, #148]	; (8003304 <UART_AdvFeatureConfig+0x158>)
 8003270:	4013      	ands	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2240      	movs	r2, #64	; 0x40
 8003286:	4013      	ands	r3, r2
 8003288:	d01d      	beq.n	80032c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <UART_AdvFeatureConfig+0x15c>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	035b      	lsls	r3, r3, #13
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10b      	bne.n	80032c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <UART_AdvFeatureConfig+0x160>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	4013      	ands	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <UART_AdvFeatureConfig+0x164>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	fffdffff 	.word	0xfffdffff
 80032f4:	fffeffff 	.word	0xfffeffff
 80032f8:	fffbffff 	.word	0xfffbffff
 80032fc:	ffff7fff 	.word	0xffff7fff
 8003300:	ffffefff 	.word	0xffffefff
 8003304:	ffffdfff 	.word	0xffffdfff
 8003308:	ffefffff 	.word	0xffefffff
 800330c:	ff9fffff 	.word	0xff9fffff
 8003310:	fff7ffff 	.word	0xfff7ffff

08003314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	2100      	movs	r1, #0
 8003322:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003324:	f7fd fe5e 	bl	8000fe4 <HAL_GetTick>
 8003328:	0003      	movs	r3, r0
 800332a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2208      	movs	r2, #8
 8003334:	4013      	ands	r3, r2
 8003336:	2b08      	cmp	r3, #8
 8003338:	d10c      	bne.n	8003354 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	0391      	lsls	r1, r2, #14
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <UART_CheckIdleState+0x8c>)
 8003344:	9200      	str	r2, [sp, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	f000 f82c 	bl	80033a4 <UART_WaitOnFlagUntilTimeout>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d001      	beq.n	8003354 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e021      	b.n	8003398 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2204      	movs	r2, #4
 800335c:	4013      	ands	r3, r2
 800335e:	2b04      	cmp	r3, #4
 8003360:	d10c      	bne.n	800337c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	03d1      	lsls	r1, r2, #15
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <UART_CheckIdleState+0x8c>)
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	f000 f818 	bl	80033a4 <UART_WaitOnFlagUntilTimeout>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e00d      	b.n	8003398 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2274      	movs	r2, #116	; 0x74
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	01ffffff 	.word	0x01ffffff

080033a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b094      	sub	sp, #80	; 0x50
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	1dfb      	adds	r3, r7, #7
 80033b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b4:	e0a3      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b8:	3301      	adds	r3, #1
 80033ba:	d100      	bne.n	80033be <UART_WaitOnFlagUntilTimeout+0x1a>
 80033bc:	e09f      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fd fe11 	bl	8000fe4 <HAL_GetTick>
 80033c2:	0002      	movs	r2, r0
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d13d      	bne.n	8003450 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d4:	f3ef 8310 	mrs	r3, PRIMASK
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
 80033de:	2301      	movs	r3, #1
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	494c      	ldr	r1, [pc, #304]	; (8003528 <UART_WaitOnFlagUntilTimeout+0x184>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003406:	f3ef 8310 	mrs	r3, PRIMASK
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800340c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340e:	643b      	str	r3, [r7, #64]	; 0x40
 8003410:	2301      	movs	r3, #1
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	438a      	bics	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2274      	movs	r2, #116	; 0x74
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e067      	b.n	8003520 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2204      	movs	r2, #4
 8003458:	4013      	ands	r3, r2
 800345a:	d050      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	401a      	ands	r2, r3
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	429a      	cmp	r2, r3
 800346e:	d146      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347a:	f3ef 8310 	mrs	r3, PRIMASK
 800347e:	613b      	str	r3, [r7, #16]
  return(result);
 8003480:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4923      	ldr	r1, [pc, #140]	; (8003528 <UART_WaitOnFlagUntilTimeout+0x184>)
 800349c:	400a      	ands	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ac:	f3ef 8310 	mrs	r3, PRIMASK
 80034b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80034b2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b6:	2301      	movs	r3, #1
 80034b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	438a      	bics	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	f383 8810 	msr	PRIMASK, r3
}
 80034dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	2120      	movs	r1, #32
 80034f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2274      	movs	r2, #116	; 0x74
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e010      	b.n	8003520 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	425a      	negs	r2, r3
 800350e:	4153      	adcs	r3, r2
 8003510:	b2db      	uxtb	r3, r3
 8003512:	001a      	movs	r2, r3
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d100      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0x17a>
 800351c:	e74b      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b014      	add	sp, #80	; 0x50
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffffe5f 	.word	0xfffffe5f

0800352c <__libc_init_array>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	2600      	movs	r6, #0
 8003530:	4d0c      	ldr	r5, [pc, #48]	; (8003564 <__libc_init_array+0x38>)
 8003532:	4c0d      	ldr	r4, [pc, #52]	; (8003568 <__libc_init_array+0x3c>)
 8003534:	1b64      	subs	r4, r4, r5
 8003536:	10a4      	asrs	r4, r4, #2
 8003538:	42a6      	cmp	r6, r4
 800353a:	d109      	bne.n	8003550 <__libc_init_array+0x24>
 800353c:	2600      	movs	r6, #0
 800353e:	f000 f821 	bl	8003584 <_init>
 8003542:	4d0a      	ldr	r5, [pc, #40]	; (800356c <__libc_init_array+0x40>)
 8003544:	4c0a      	ldr	r4, [pc, #40]	; (8003570 <__libc_init_array+0x44>)
 8003546:	1b64      	subs	r4, r4, r5
 8003548:	10a4      	asrs	r4, r4, #2
 800354a:	42a6      	cmp	r6, r4
 800354c:	d105      	bne.n	800355a <__libc_init_array+0x2e>
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	00b3      	lsls	r3, r6, #2
 8003552:	58eb      	ldr	r3, [r5, r3]
 8003554:	4798      	blx	r3
 8003556:	3601      	adds	r6, #1
 8003558:	e7ee      	b.n	8003538 <__libc_init_array+0xc>
 800355a:	00b3      	lsls	r3, r6, #2
 800355c:	58eb      	ldr	r3, [r5, r3]
 800355e:	4798      	blx	r3
 8003560:	3601      	adds	r6, #1
 8003562:	e7f2      	b.n	800354a <__libc_init_array+0x1e>
 8003564:	08003688 	.word	0x08003688
 8003568:	08003688 	.word	0x08003688
 800356c:	08003688 	.word	0x08003688
 8003570:	0800368c 	.word	0x0800368c

08003574 <memset>:
 8003574:	0003      	movs	r3, r0
 8003576:	1882      	adds	r2, r0, r2
 8003578:	4293      	cmp	r3, r2
 800357a:	d100      	bne.n	800357e <memset+0xa>
 800357c:	4770      	bx	lr
 800357e:	7019      	strb	r1, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	e7f9      	b.n	8003578 <memset+0x4>

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
